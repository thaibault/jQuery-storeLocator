#!/usr/bin/env node
// -*- coding: utf-8 -*-
'use strict'
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*******************!*\
  !*** multi index ***!
  \*******************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! test */3);


/***/ },
/* 1 */
/*!*************************!*\
  !*** external "jquery" ***!
  \*************************/
/***/ function(module, exports) {

	eval("module.exports = require(\"jquery\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImpxdWVyeVwiPzBiNzYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwianF1ZXJ5XCIpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogZXh0ZXJuYWwgXCJqcXVlcnlcIlxuICoqIG1vZHVsZSBpZCA9IDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 2 */
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(module) {// #!/usr/bin/env node\n// -*- coding: utf-8 -*-\n/** @module jQuery-storeLocator */'use strict'; /* !\n    region header\n    [Project page](http://torben.website/jQuery-storeLocator)\n\n    Copyright Torben Sickert (info[\"~at~\"]torben.website) 16.12.2012\n\n    License\n    -------\n\n    This library written by Torben Sickert stand under a creative commons\n    naming 3.0 unported license.\n    See http://creativecommons.org/licenses/by/3.0/deed.de\n    endregion\n*/ // region imports\nexports.__esModule=true;var _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol?\"symbol\":typeof obj;};var _jquery=__webpack_require__(/*! jquery */ 1);var _jquery2=_interopRequireDefault(_jquery);__webpack_require__(/*! jQuery-tools */ 8);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;} /*\n    NOTE: Bind marker clusters google instance to an empty object first to add\n    the runtime evaluated instance later to.\n*/var googleMarkerClusterer= false?{ // IgnoreTypeCheck\nClass:require('googleMarkerClusterer'),google:{} // IgnoreTypeCheck\n}:__webpack_require__(/*! exports?Class=MarkerClusterer,google=google!imports?google=>{}!googleMarkerClusterer */ 4); /* eslint-disable no-duplicate-imports */ /* eslint-enable no-duplicate-imports */ // endregion\n// region types\n// endregion\nvar context=function(){if(_jquery2.default.type(window)==='undefined'){if(_jquery2.default.type(global)==='undefined')return _jquery2.default.type(module)==='undefined'?{}:module;return global;}return window;}();if(!context.hasOwnProperty('document')&&_jquery2.default.hasOwnProperty('context'))context.document=_jquery2.default.context; // region plugins/classes\n/**\n * A jQuery storelocator plugin.\n * Expected store data format:\n * {latitude: NUMBER, longitude: NUMBER, markerIconFileName: STRING}\n * @property static:maps - Holds the currently used maps class.\n * @property static:_name - Defines this class name to allow retrieving them\n * after name mangling.\n * @property static:_apiLoad - Holds the currently promise to retrieve a new\n * maps api.\n * @property currentSearchResults - Saves last found search results.\n * @property currentSearchText - Saves last searched string.\n * @property resultsDomNode - Saves currently opened results dom node or null\n * if no results exists yet.\n * @property currentSearchResultsDomNode - Saves current search results content\n * dom node.\n * @property currentlyOpenWindow - Saves currently opened window instance.\n * @property currentlyHighlightedMarker - Saves currently highlighted marker\n * instance.\n * @property searchResultsDirty - Indicates weather current search results\n * aren't valid anymore.\n * @property seenLocations - Saves all seen locations to recognize duplicates.\n * @property markers - Saves all recognized markers.\n * @property currentSearchResultRange - Public editable property to set current\n * search result range. This is useful for pagination implementations in\n * template level.\n * @property _options - Saves all plugin interface options.\n * @property _options.stores\n * {string|Array.<string>|Object.<string, number|Function>} - URL to retrieve\n * stores, list of stores or object describing bounds to create random stores\n * within. If a \"generateProperties\" function is given it will be called to\n * retrieve additional properties for each store. The specified store will be\n * given to the function.\n * @property _options.addtionalStoreProperties {Object.<string, mixed>} -\n * Additional static store properties which will be available to each store.\n * @property _options.iconPath {string} - Path prefix to search for marker\n * icons.\n * @property _options.defaultMarkerIconFileName {string} - Specifies a fallback\n * marker\n * icon (if no store specific icon was set). If set to \"null\" google will place\n * a fallback icon.\n * @property _options.startLocation {null|Object} - If not provided we\n * initialize the map with center in current location determined by internet\n * protocol address. If an object is given a \"latitude\" and \"longitude\" with a\n * saved float are assumed.\n * @property _options.fallbackLocation {Object} - Fallback location if\n * automatic location determination has failed.\n * @property _options.fallbackLocation.latitude {number} - Latitude value.\n * @property _options.fallbackLocation.longitude {number} - Longitude value.\n * @property _options.ip {null|string} - If provided given ip will be used to\n * determine current location instead of automatically determined one.\n * @property _options.ipToLocation {Object} - Configuration for ip to location\n * conversion.\n * @property _options.ipToLocation.applicationInterfaceURL {string} - IP to\n * location determination application interface url. {1} and {2} represents\n * currently used protocol and potentially given ip.\n * @property _options.ipToLocation.timeoutInMilliseconds {number} - Time to\n * wait for ip resolve. If time is up initialize on given fallback location.\n * @property _options.ipToLocation.bounds\n * {Object.<string, Object.<string, number>>} - Defines bound withing\n * determined locations should be. If resolved location isn't within this\n * location it will be ignored.\n * @property _options.ipToLocation.bound.northEast {Object.<string, number>} -\n * Defines north east bound.\n * @property _options.ipToLocation.bound.northEast.latitude {number} - North\n * east latitude bond.\n * @property _options.ipToLocation.bound.northEast.longitude {number} - North\n * east longitude bond.\n * @property _options.ipToLocation.bound.southWest {Object.<string, number>} -\n * Defined south west bound.\n * @property _options.ipToLocation.bound.southWest.latitude {number} - South\n * east latitude bound.\n * @property _options.ipToLocation.bound.southWest.longitude {number} - South\n * west longitude bound.\n * @property _options.map {Object} - Initial view properties.\n * @property _options.showInputAfterLoadedDelayInMilliseconds {number} - Delay\n * before we show search input field.\n * @property _options.inputFadeInOption {Object.<string, mixed>} - Transition\n * options to show search input field.\n * @property _options.distanceToMoveByDuplicatedEntries {number} - Distance to\n * move if stores are determined with same latitude and longitude.\n * @property _options.marker {Object|null} - Options passed to the marker\n * cluster. If set to \"null\" no marker cluster will appear.\n * @property _options.icon {Object} - Options passed to the icon.\n * @property _options.successfulSearchZoom {number} - Specifies a zoom value\n * wich will be adjusted after successfully picked a search result. If set to\n * \"null\" no zoom change happens.\n * @property _options.infoWindow {Object.<string, mixed>} - Info window\n * options.\n * @property _options.infoWindow.content {Function|string|null} - Function or\n * string returning or representing the info box. If a function is given and a\n * promise is returned the info box will be filled with the given loading\n * content and updated with the resolved data. The function becomes the\n * corresponding marker as first argument and the store locator instance as\n * second argument. If nothing is provided all available data will be listed in\n * a generic info window.\n * @property _options.infoWindow.additionalMoveToBottomInPixel {number} -\n * Additional move to bottom relative to the marker if an info window has been\n * opened.\n * @property _options.infoWindow.loadingContent {string} - Content to show in\n * the info window during info window load.\n * @property _options.searchBox {number|Object} - If a number is given a\n * generic search will be provided and given number will be interpret as search\n * result precision tolerance to identify a marker as search result. If an\n * object is given it indicates what should be search for. The object can hold\n * up to nine keys. \"properties\" to specify which store data should contain\n * given search text, \"maximumNumberOfResults\" to limit the auto complete\n * result, \"loadingContent\" to display while the results are loading,\n * \"numberOfAdditionalGenericPlaces\" a tuple describing a range of minimal to\n * maximal limits of additional generic google suggestions depending on number\n * of local search results, \"maximalDistanceInMeter\" to specify maximal\n * distance from current position to search suggestions, \"genericPlaceFilter\"\n * specifies a function which gets a relevant place to decide if the place\n * should be included (returns a boolean value), \"prefereGenericResults\"\n * specifies a boolean value indicating if generic search results should be the\n * first results, \"genericPlaceSearchOptions\" specifies how a generic place\n * search should be done (google maps request object specification) and\n * \"content\" to render the search results. \"content\" can be a function or\n * string returning or representing the search results. If a function is given\n * and a promise is returned the info box will be filled with the given loading\n * content and updated with the resolved data. The function becomes search\n * results as first argument, a boolean value as second argument indicating if\n * the maximum number of search results was reached and the store locator\n * instance as third argument. If nothing is provided all available data will\n * be listed in a generic info window.\n * @property _options.onInfoWindowOpen {Function} - Triggers if a marker info\n * window will be opened.\n * @property _options.onInfoWindowOpened {Function} - Triggers if a marker info\n * window has finished opening.\n * @property _options.onAddSearchResults {Function} - Triggers before new\n * search results appears.\n * @property _options.onRemoveSearchResults {Function} - Triggers before old\n * search results will be removed.\n * @property _options.onOpenSearchResults {Function} - Triggers before search\n * result box appears.\n * @property _options.onCloseSearchResults {Function} - Triggers before search\n * result box will be hidden.\n * @property _options.onMarkerHighlighted {Function} - Triggers after a marker\n * starts to highlight.\n */var StoreLocator=function(_$$Tools$class){_inherits(StoreLocator,_$$Tools$class);function StoreLocator(){_classCallCheck(this,StoreLocator);return _possibleConstructorReturn(this,_$$Tools$class.apply(this,arguments));} // endregion\n/**\n     * Entry point for object orientated jQuery plugin.\n     * @param options - Options to overwrite default ones.\n     * @returns Currently selected dom node.\n     */ // endregion\n// region dynamic properties\nStoreLocator.prototype.initialize=function initialize(){var _this2=this;var options=arguments.length<=0||arguments[0]===undefined?{}:arguments[0]; // region properties\nthis.currentSearchResults=[];this.currentSearchText=null;this.resultsDomNode=null;this.currentSearchResultsDomNode=null;this.currentlyOpenWindow=null;this.currentlyHighlightedMarker=null;this.searchResultsDirty=false;this.seenLocations=[];this.markers=[];this.currentSearchResultRange=null;this._options={api:{url:'https://maps.googleapis.com/maps/api/js'+'?{1}v=3&sensor=false&libraries=places,geometry&'+'callback={2}',callbackName:null,key:null},stores:{northEast:{latitude:85,longitude:180},southWest:{latitude:-85,longitude:-180},number:100,generateProperties:function generateProperties(store){return store;}},addtionalStoreProperties:{},iconPath:'/webAsset/image/storeLocator/',defaultMarkerIconFileName:null,startLocation:null,fallbackLocation:{latitude:51.124213,longitude:10.147705},ip:null,ipToLocation:{applicationInterfaceURL:'{1}://freegeoip.net/json/{2}',timeoutInMilliseconds:5000,bounds:{northEast:{latitude:85,longitude:180},southWest:{latitude:-85,longitude:-180}}},map:{zoom:3},limit:{zoom:{minimum:1,maximum:11},bounds:{northEeast:{latitude:85,longitude:180},southWest:{latitude:-85,longitude:-180}}},showInputAfterLoadedDelayInMilliseconds:500,input:{hide:{opacity:0},showAnimation:[{opacity:1},{duration:'fast'}]},distanceToMoveByDuplicatedEntries:0.0001,marker:{cluster:{gridSize:100,maxZoom:11,imagePath:'https://cdn.rawgit.com/googlemaps/'+'js-marker-clusterer/gh-pages/images/m'},icon:{size:{width:44,height:49,unit:'px'},scaledSize:{width:44,height:49,unit:'px'}}},successfulSearchZoom:12,infoWindow:{content:null,additionalMoveToBottomInPixel:120,loadingContent:'<div class=\"idle\">loading...</div>'},searchBox:50,onInfoWindowOpen:_jquery2.default.noop,onInfoWindowOpened:_jquery2.default.noop,onAddSearchResults:_jquery2.default.noop,onRemoveSearchResults:_jquery2.default.noop,onOpenSearchResults:_jquery2.default.noop,onCloseSearchResults:_jquery2.default.noop,onMarkerHighlighted:_jquery2.default.noop}; // endregion\n// Merges given options with default options recursively.\n_$$Tools$class.prototype.initialize.call(this,options);this.$domNode.find('input').css(this._options.input.hide);var loadInitialized=true;if(_typeof(this.constructor._apiLoad)!=='object'){loadInitialized=false;this.constructor._apiLoad=_jquery2.default.Deferred();}var result=this.constructor._apiLoad.then(this.getMethod(this.bootstrap)).done(function(){return _this2.fireEvent('loaded');});if('google' in context&&'maps' in context.google){this.constructor.google=context.google;if(this.constructor._apiLoad.state()!=='resolved')setTimeout(function(){return _this2.constructor._apiLoad.resolve(_this2.$domNode);});}else if('google' in context.window&&'maps' in context.window.google){this.constructor.google=context.window.google;if(this.constructor._apiLoad.state()!=='resolved')setTimeout(function(){return _this2.constructor._apiLoad.resolve(_this2.$domNode);});}else if(!loadInitialized){var callbackName=void 0;if(this._options.api.callbackName)callbackName=this._options.api.callbackName;else callbackName=this.constructor.determineUniqueScopeName();context.window[callbackName]=function(){_this2.constructor.google=context.window.google;_this2.constructor._apiLoad.resolve(_this2.$domNode);};_jquery2.default.getScript(this.constructor.stringFormat(this._options.api.url,this._options.api.key?'key='+this._options.api.key+'&':'','window.'+callbackName)).catch(function(response,error){return _this2.constructor._apiLoad.reject(error);});}return result;}; /**\n     * Determines useful location cluster, info windows and marker.\n     * @returns The current instance.\n     */ // region static properties\nStoreLocator.prototype.bootstrap=function bootstrap(){var _this3=this;if(this._options.startLocation)return this.initializeMap();this._options.startLocation=this._options.fallbackLocation; /*\n            NOTE: If request is slower than the timeout parameter for jsonp\n            request the padding function isn't set anymore so an error\n            occurs. That's why we use our own timeout implementation.\n        */var loaded=false;var $deferred=_jquery2.default.Deferred();var fallbackTimeoutID=setTimeout(function(){loaded=true;_this3.initializeMap().then(function(){return $deferred.resolve(_this3.$domNode);});},this._options.ipToLocation.timeoutInMilliseconds);_jquery2.default.ajax({url:this.constructor.stringFormat(this._options.ipToLocation.applicationInterfaceURL,document.location.protocol.substring(0,document.location.protocol.length-1),this._options.ip||''),dataType:'jsonp',cache:true}).always(function(currentLocation,textStatus){if(!loaded){clearTimeout(fallbackTimeoutID);loaded=true;if(textStatus==='success') /*\n                        Check if determined location is within defined\n                        bounds.\n                    */if(!_this3._options.ipToLocation.bounds||new _this3.constructor.google.maps.LatLngBounds(new _this3.constructor.google.maps.LatLng(_this3._options.ipToLocation.bounds.southWest.latitude,_this3._options.ipToLocation.bounds.southWest.longitude),new _this3.constructor.google.maps.LatLng(_this3._options.ipToLocation.bounds.northEast.latitude,_this3._options.ipToLocation.bounds.northEast.longitude)).contains(new _this3.constructor.google.maps.LatLng(currentLocation.latitude,currentLocation.longitude)))_this3._options.startLocation=currentLocation;_this3.initializeMap().then(function(){return $deferred.resolve(_this3.$domNode);});}});return $deferred;}; /**\n     * Initializes cluster, info windows and marker.\n     * @returns The current instance.\n     */StoreLocator.prototype.initializeMap=function initializeMap(){var _this4=this;this._options.map.center=new this.constructor.google.maps.LatLng(this._options.startLocation.latitude,this._options.startLocation.longitude);this.map=new this.constructor.google.maps.Map((0,_jquery2.default)('<div>').appendTo(this.$domNode.css('display','block'))[0],this._options.map);if(this._options.limit.bounds)this.constructor.google.maps.event.addListener(this.map,'dragend',function(){var limitBounds=_this4.constructor.google.maps.LatLngBounds(new _this4.constructor.google.maps.LatLng(_this4._options.limit.bounds.southWest.latitude,_this4._options.limit.bounds.southWest.longitude));var currentCenter=_this4.map.getCenter();if(!limitBounds.contains(currentCenter)){var newCenter={latitude:0,longitude:0};if(currentCenter.lng()<limitBounds.getSouthWest().lng())newCenter.longitude=limitBounds.getSouthWest().lng();if(currentCenter.lng()>limitBounds.getNorthEast().lng())newCenter.longitude=limitBounds.getNorthEast().lng();if(currentCenter.lat()<limitBounds.getSouthWest().lat())newCenter.latitude=limitBounds.getSouthWest().lat();if(currentCenter.lat()>limitBounds.getNorthEast().lat())newCenter.latitude=limitBounds.getNorthEast().lat();_this4.map.setCenter(new _this4.constructor.google.maps.LatLng(newCenter.latitude,newCenter.longitude));}});if(this._options.limit.zoom)this.constructor.google.maps.event.addListener(this.map,'zoom_changed',function(){if(_this4.map.getZoom()<_this4._options.limit.zoom.minimum)_this4.map.setZoom(_this4._options.limit.zoom.minimum);else if(_this4.map.getZoom()>_this4._options.limit.zoom.maximum)_this4.map.setZoom(_this4._options.limit.zoom.maximum);});var markerCluster=null;if(this._options.marker.cluster){_jquery2.default.extend(googleMarkerClusterer.google,this.constructor.google);markerCluster=new googleMarkerClusterer.Class(this.map,[],this._options.marker.cluster);} // Add a marker for each retrieved store.\nvar $addMarkerDeferred=_jquery2.default.Deferred();var markerList=[];if(_jquery2.default.isArray(this._options.stores)){for(var _iterator=this._options.stores,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[Symbol.iterator]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else {_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var _store=_ref;_jquery2.default.extend(true,_store,this._options.addtionalStoreProperties);var marker=this.createMarker(_store);if(markerCluster)markerCluster.addMarker(marker);markerList.push(marker);$addMarkerDeferred.resolve(markerList);}}else if(_jquery2.default.type(this._options.stores)==='string')_jquery2.default.getJSON(this._options.stores,function(stores){for(var _iterator2=stores,_isArray2=Array.isArray(_iterator2),_i2=0,_iterator2=_isArray2?_iterator2:_iterator2[Symbol.iterator]();;){var _ref2;if(_isArray2){if(_i2>=_iterator2.length)break;_ref2=_iterator2[_i2++];}else {_i2=_iterator2.next();if(_i2.done)break;_ref2=_i2.value;}var store=_ref2;_jquery2.default.extend(true,store,_this4._options.addtionalStoreProperties);var _marker=_this4.createMarker(store);if(markerCluster)markerCluster.addMarker(_marker);markerList.push(_marker);}$addMarkerDeferred.resolve(markerList);});else {var southWest=new this.constructor.google.maps.LatLng(this._options.stores.southWest.latitude,this._options.stores.southWest.longitude);var northEast=new this.constructor.google.maps.LatLng(this._options.stores.northEast.latitude,this._options.stores.northEast.longitude);for(var index=0;index<this._options.stores.number;index++){var store=_jquery2.default.extend({latitude:southWest.lat()+(northEast.lat()-southWest.lat())*Math.random(),longitude:southWest.lng()+(northEast.lng()-southWest.lng())*Math.random()},this._options.addtionalStoreProperties);var _marker2=this.createMarker(_jquery2.default.extend(store,this._options.stores.generateProperties(store)));if(markerCluster)markerCluster.addMarker(_marker2);markerList.push(_marker2);}$addMarkerDeferred.resolve(markerList);} // Create the search box and link it to the UI element.\nthis.map.controls[this.constructor.google.maps.ControlPosition.TOP_LEFT].push(this.$domNode.find('input')[0]);if(_jquery2.default.type(this._options.searchBox)==='number')this.initializeGenericSearchBox();else {this.constructor.google.maps.event.addListener(this.map,'click',function(){return _this4.closeSearchResults();});this.constructor.google.maps.event.addListener(this.map,'dragstart',function(){return _this4.closeSearchResults();});this._options.searchBox=_jquery2.default.extend(true,{maximumNumberOfResults:50,numberOfAdditionalGenericPlaces:[2,5],maximalDistanceInMeter:1000000,loadingContent:this._options.infoWindow.loadingContent,genericPlaceFilter:function genericPlaceFilter(place){return place.formatted_address.indexOf(' Deutschland')!==-1||place.formatted_address.indexOf(' Germany')!==-1;},prefereGenericResults:true,genericPlaceSearchOptions:{radius:'50000'}},this._options.searchBox);this.initializeDataSourceSearchBox();} // Close marker if zoom level is bigger than the aggregation.\nthis.constructor.google.maps.event.addListener(this.map,'zoom_changed',function(){if(_typeof(_this4.currentlyOpenWindow)==='object'&&_this4.currentlyOpenWindow&&_this4.currentlyOpenWindow.isOpen&&_this4.map.getZoom()<=_this4._options.marker.cluster.maxZoom){_this4.currentlyOpenWindow.isOpen=false;_this4.currentlyOpenWindow.close();}});var $mapLoadedDeferred=_jquery2.default.Deferred();this.constructor.google.maps.event.addListenerOnce(this.map,'idle',function(){return $addMarkerDeferred.then(function(){return $mapLoadedDeferred.resolve(_this4.$domNode);});});return $mapLoadedDeferred;}; /**\n     * Position search results right below the search input field.\n     * @returns The current instance.\n     */StoreLocator.prototype.initializeDataSourceSearchResultsBox=function initializeDataSourceSearchResultsBox(){var cssProperties={};var _arr=['position','width','top','left','border'];for(var _i3=0;_i3<_arr.length;_i3++){var propertyName=_arr[_i3];cssProperties[propertyName]=this.$domNode.find('input').css(propertyName);}cssProperties.marginTop=this.$domNode.find('input').outerHeight(true); // Prepare search result positioning.\nthis.resultsDomNode=(0,_jquery2.default)('<div>').addClass(this.constructor.stringCamelCaseToDelimited(this.__name__+'SearchResults')).css(cssProperties); // Inject the final search results into the dom tree.\nthis.$domNode.find('input').after(this.resultsDomNode);return this;}; /**\n     * Initializes a data source based search box to open and focus them\n     * matching marker.\n     * @returns The current instance.\n     */StoreLocator.prototype.initializeDataSourceSearchBox=function initializeDataSourceSearchBox(){var _this5=this;this.on(this.$domNode,'keydown',function(event){ /*\n                NOTE: Events that doesn't occurs in search context are handled\n                by the native map implementation and won't be propagated so we\n                doesn't have to care about that.\n            */if(_this5.currentSearchResults.length){if(_this5.currentSearchResultRange)_this5.currentSearchResultRange=[Math.max(0,_this5.currentSearchResultRange[0]),Math.min(_this5.currentSearchResults.length-1, // IgnoreTypeCheck\n_this5.currentSearchResultRange[1])];else _this5.currentSearchResultRange=[0,_this5.currentSearchResults.length-1];var currentIndex=-1;if(_this5.currentlyHighlightedMarker)currentIndex=_this5.currentSearchResults.indexOf(_this5.currentlyHighlightedMarker);if(event.keyCode===_this5.keyCode.DOWN){if(currentIndex===-1||_this5.currentSearchResultRange[1]<currentIndex+1)_this5.highlightMarker(_this5.currentSearchResults[_this5.currentSearchResultRange[0]],event);else _this5.highlightMarker(_this5.currentSearchResults[currentIndex+1],event);}else if(event.keyCode===_this5.keyCode.UP){if([_this5.currentSearchResultRange[0],-1].includes(currentIndex))_this5.highlightMarker(_this5.currentSearchResults[ // IgnoreTypeCheck\n_this5.currentSearchResultRange[1]],event);else _this5.highlightMarker(_this5.currentSearchResults[currentIndex-1],event);}else if(event.keyCode===_this5.keyCode.ENTER&&_this5.currentlyHighlightedMarker){event.stopPropagation();if(_this5.currentlyHighlightedMarker)if(_this5.currentlyHighlightedMarker.infoWindow)_this5.openMarker(_this5.currentlyHighlightedMarker,event);else _this5.openPlace(_this5.currentlyHighlightedMarker.data,event);}}});this.on(this.$domNode.find('input'),'focus',function(){if(_this5.currentSearchText)_this5.openSearchResults();});this.on(this.$domNode.find('input'),'keydown',function(event){for(var name in _this5.keyCode){if(_this5.keyCode.hasOwnProperty(name)&&event.keyCode===_this5.keyCode[name]&&name!=='DOWN')return;}});if(this.currentSearchText)this.openSearchResults();this.on(this.$domNode.find('input'),'click',function(){if(_this5.currentSearchText)_this5.openSearchResults();});this.constructor.google.maps.event.addListener(this.map,'center_changed',function(){ // NOTE: Search results depends on current position.\nif(_this5.currentSearchText&&_this5.resultsDomNode)_this5.searchResultsDirty=true;});this.on(this.$domNode.find('input'),'keyup',this.getUpdateSearchResultsHandler());return this;}; /**\n     * Triggers on each search request.\n     * @returns The current instance.\n     */StoreLocator.prototype.getUpdateSearchResultsHandler=function getUpdateSearchResultsHandler(){var _this6=this;var placesService=new this.constructor.google.maps.places.PlacesService(this.map);return this.debounce(function(event){for(var name in _this6.keyCode){if(event&&event.keyCode===_this6.keyCode[name]&&!['DELETE','BACKSPACE'].includes(name))return;}_this6.acquireLock(_this6.constructor._name+'Search',function(){var searchText=_this6.$domNode.find('input').val().trim();if(_this6.currentSearchText===searchText&&!_this6.searchResultsDirty)return _this6.releaseLock(_this6.constructor._name+'Search');_this6.searchResultsDirty=false;if(!_this6.resultsDomNode)_this6.initializeDataSourceSearchResultsBox();if(!searchText&&_this6.resultsDomNode){_this6.currentSearchText='';_this6.currentSearchResults=[];_this6.resultsDomNode.html('');_this6.currentSearchResultsDomNode=null;_this6.closeSearchResults();return _this6.releaseLock(_this6.constructor._name+'Search');}_this6.openSearchResults();var loadingDomNode=(0,_jquery2.default)(_this6._options.searchBox.loadingContent);if(_this6.resultsDomNode&&!_this6.fireEvent('addSearchResults',false,_this6,loadingDomNode,_this6.resultsDomNode,_this6.currentSearchResultsDomNode||[]))_this6.resultsDomNode.html(loadingDomNode);if(_this6.currentSearchResultsDomNode&&_this6.currentSearchResultsDomNode.length)_this6.fireEvent('removeSearchResults',false,_this6,_this6.currentSearchResultsDomNode);_this6.currentSearchResultsDomNode=loadingDomNode;if(_this6._options.searchBox.numberOfAdditionalGenericPlaces) /*\n                        NOTE: Google searches for more items than exists in the\n                        the specified radius. However the radius is a string in\n                        the examples provided by google.\n                    */placesService.textSearch(_jquery2.default.extend({query:searchText,location:_this6.map.getCenter()},_this6._options.searchBox.genericPlaceSearchOptions),function(places){if(places)_this6.handleGenericSearchResults(places,searchText);});else _this6.performLocalSearch(searchText);},1000);});}; /**\n     * Sorts and filters search results given by the google api.\n     * @param places - List of place objects.\n     * @param searchText - Words which should occur in requested search\n     * results.\n     * @returns Returns current instance.\n     */StoreLocator.prototype.handleGenericSearchResults=function handleGenericSearchResults(places,searchText){var _this7=this;var searchResults=[]; /*\n            NOTE: Since google text search doesn't support sorting by distance\n            we have to sort by our own.\n        */var index=1;var _loop=function _loop(){if(_isArray3){if(_i4>=_iterator3.length)return 'break';_ref3=_iterator3[_i4++];}else {_i4=_iterator3.next();if(_i4.done)return 'break';_ref3=_i4.value;}var place=_ref3;index+=1;var distance=_this7.constructor.google.maps.geometry.spherical.computeDistanceBetween(_this7.map.getCenter(),place.geometry.location);if(distance>_this7._options.searchBox.maximalDistanceInMeter)return 'break';if(_this7._options.searchBox.genericPlaceFilter(place)){var result={data:_jquery2.default.extend(place,{logoFilePath:place.icon.replace(/^http:(\\/\\/)/,document.location.protocol+'$1'),address:place.formatted_address,distance:distance}),position:place.geometry.location,open:function open(event){return _this7.openPlace(place,event);},highlight:function highlight(event,type){_this7.isHighlighted=type!=='stop';}};searchResults.push(result);if(_this7._options.searchBox.numberOfAdditionalGenericPlaces[1]<index)return 'break';}};for(var _iterator3=places.sort(function(firstPlace,secondPlace){return _this7.constructor.google.maps.geometry.spherical.computeDistanceBetween(_this7.map.getCenter(),firstPlace.geometry.location)-_this7.constructor.google.maps.geometry.spherical.computeDistanceBetween(_this7.map.getCenter(),secondPlace.geometry.location);}),_isArray3=Array.isArray(_iterator3),_i4=0,_iterator3=_isArray3?_iterator3:_iterator3[Symbol.iterator]();;){var _ref3;var _ret=_loop();if(_ret==='break')break;}return this.performLocalSearch(searchText,searchResults);}; /**\n     * Performs a search on locally given store data.\n     * @param searchText - Text to search for.\n     * @param searchResults - A list if generic search results.\n     * @returns The current instance.\n     */StoreLocator.prototype.performLocalSearch=function performLocalSearch(searchText){var _this8=this;var searchResults=arguments.length<=1||arguments[1]===undefined?[]:arguments[1];var numberOfGenericSearchResults=searchResults.length;var _loop2=function _loop2(){if(_isArray4){if(_i5>=_iterator4.length)return 'break';_ref4=_iterator4[_i5++];}else {_i5=_iterator4.next();if(_i5.done)return 'break';_ref4=_i5.value;}var marker=_ref4;for(var _iterator5=_this8._options.searchBox.properties,_isArray5=Array.isArray(_iterator5),_i6=0,_iterator5=_isArray5?_iterator5:_iterator5[Symbol.iterator]();;){var _ref5;if(_isArray5){if(_i6>=_iterator5.length)break;_ref5=_iterator5[_i6++];}else {_i6=_iterator5.next();if(_i6.done)break;_ref5=_i6.value;}var key=_ref5;if((marker.data[key]||marker.data[key]===0)&&(''+marker.data[key]).toLowerCase().replace(/[-_&]+/g,' ').indexOf(searchText.toLowerCase().replace(/[-_&]+/g,' '))!==-1){marker.open=function(event){return _this8.openMarker(marker,event);};marker.highlight=function(event,type){return _this8.highlightMarker(marker,event,type);};searchResults.push(marker);break;}}};for(var _iterator4=this.markers,_isArray4=Array.isArray(_iterator4),_i5=0,_iterator4=_isArray4?_iterator4:_iterator4[Symbol.iterator]();;){var _ref4;var _ret2=_loop2();if(_ret2==='break')break;} /*\n            Remove generic place results if there are enough local search\n            results.\n        */if(this._options.searchBox.numberOfAdditionalGenericPlaces&&searchResults.length&&numberOfGenericSearchResults>this._options.searchBox.numberOfAdditionalGenericPlaces[0]&&searchResults.length>this._options.searchBox.numberOfAdditionalGenericPlaces[1])searchResults.splice(this._options.searchBox.numberOfAdditionalGenericPlaces[0],numberOfGenericSearchResults-this._options.searchBox.numberOfAdditionalGenericPlaces[0]); // Slice additional unneeded local search results.\nvar limitReached=false;if(this._options.searchBox.maximumNumberOfResults<searchResults.length){limitReached=true;searchResults.splice(this._options.searchBox.maximumNumberOfResults,searchResults.length);} /*\n            Sort results by current map center form nearer to more fare away\n            results.\n        */searchResults.sort(function(first,second){if(_this8._options.searchBox.prefereGenericResults&&!first.infoWindow&&second.infoWindow)return -1;if(_this8._options.searchBox.prefereGenericResults&&!second.infoWindow&&first.infoWindow)return 1;return _this8.constructor.google.maps.geometry.spherical.computeDistanceBetween(_this8.map.getCenter(),first.position)-_this8.constructor.google.maps.geometry.spherical.computeDistanceBetween(_this8.map.getCenter(),second.position);}); // Compile search results markup.\nvar resultsRepresentation=this.makeSearchResults(searchResults,limitReached);if(_jquery2.default.type(resultsRepresentation)==='string'){var resultsRepresentationDomNode=(0,_jquery2.default)(resultsRepresentation);if(this.resultsDomNode&&!this.fireEvent('addSearchResults',false,this,resultsRepresentationDomNode,this.resultsDomNode,this.currentSearchResultsDomNode||[]))this.resultsDomNode.html(resultsRepresentationDomNode);if(this.currentSearchResultsDomNode&&this.currentSearchResultsDomNode.length)this.fireEvent('removeSearchResults',false,this,this.currentSearchResultsDomNode);this.currentSearchResultsDomNode=resultsRepresentationDomNode;setTimeout(function(){return _this8.releaseLock(_this8.constructor._name+'Search');},0);}else if(resultsRepresentation instanceof Promise)resultsRepresentation.then(function(resultsRepresentation){var resultsRepresentationDomNode=(0,_jquery2.default)(resultsRepresentation);if(_this8.resultsDomNode&&!_this8.fireEvent('addSearchResults',false,_this8,resultsRepresentationDomNode,_this8.resultsDomNode,_this8.currentSearchResultsDomNode||[]))_this8.resultsDomNode.html(resultsRepresentationDomNode);if(_this8.currentSearchResultsDomNode&&_this8.currentSearchResultsDomNode.length)_this8.fireEvent('removeSearchResults',false,_this8,_this8.currentSearchResultsDomNode);_this8.currentSearchResultsDomNode=resultsRepresentationDomNode;_this8.releaseLock(_this8._name+'Search');});this.currentSearchText=searchText;this.currentSearchResults=searchResults.slice();return this;}; /**\n     * Opens current search results.\n     * @param event - Object with meta data for current event which has\n     * triggered to show search results.\n     * @returns The current instance.\n     */StoreLocator.prototype.openSearchResults=function openSearchResults(event){if(event)event.stopPropagation();this.getUpdateSearchResultsHandler()(event);if(this.resultsDomNode&&!this.resultsDomNode.hasClass('open')&&!this.fireEvent('openSearchResults',false,this,event,this.resultsDomNode))this.resultsDomNode.addClass('open');return this;}; /**\n     * Closes current search results.\n     * @param event - Object with meta data for current event which has\n     * triggered to close search results.\n     * @returns The current instance.\n     */StoreLocator.prototype.closeSearchResults=function closeSearchResults(){var event=arguments.length<=0||arguments[0]===undefined?null:arguments[0];if(event)event.stopPropagation();if(this.resultsDomNode&&this.resultsDomNode.hasClass('open')&&!this.fireEvent('closeSearchResults',false,this,event,this.resultsDomNode))this.resultsDomNode.removeClass('open');return this;}; /**\n     * Initializes googles generic search box and tries to match to open and\n     * focus them.\n     * @returns The current instance.\n     */StoreLocator.prototype.initializeGenericSearchBox=function initializeGenericSearchBox(){var _this9=this;var searchBox=new this.constructor.google.maps.places.SearchBox(this.$domNode.find('input')[0]); /*\n            Bias the search box results towards places that are within the\n            bounds of the current map's viewport.\n        */this.constructor.google.maps.event.addListener(this.map,'bounds_changed',function(){return searchBox.setBounds(_this9.map.getBounds());}); /*\n            Listen for the event fired when the user selects an item from the\n            pick list. Retrieve the matching places for that item.\n        */this.constructor.google.maps.event.addListener(searchBox,'places_changed',function(){return _this9.ensurePlaceLocations(searchBox.getPlaces()).then(function(places){var foundPlace=_this9.determineBestSearchResult(places);if(foundPlace){var shortestDistanceInMeter=Number.MAX_VALUE;var matchingMarker=null;for(var _iterator6=_this9.markers,_isArray6=Array.isArray(_iterator6),_i7=0,_iterator6=_isArray6?_iterator6:_iterator6[Symbol.iterator]();;){var _ref6;if(_isArray6){if(_i7>=_iterator6.length)break;_ref6=_iterator6[_i7++];}else {_i7=_iterator6.next();if(_i7.done)break;_ref6=_i7.value;}var _marker3=_ref6;var distanceInMeter=_this9.constructor.google.maps.geometry.spherical.computeDistanceBetween(foundPlace.geometry.location,_marker3.position);if(distanceInMeter<shortestDistanceInMeter){shortestDistanceInMeter=distanceInMeter;matchingMarker=_marker3;}}if(matchingMarker&&shortestDistanceInMeter<=_this9._options.searchBox){if(_this9._options.successfulSearchZoom)_this9.map.setZoom(_this9._options.successfulSearchZoom);_this9.openMarker(matchingMarker);return places;}if(_this9.currentlyOpenWindow){_this9.currentlyOpenWindow.isOpen=false;_this9.currentlyOpenWindow.close();}_this9.map.setCenter(foundPlace.geometry.location);if(_this9._options.successfulSearchZoom)_this9.map.setZoom(_this9._options.successfulSearchZoom);}return places;});});return this;}; /**\n     * Ensures that every given place have a location property.\n     * @param places - Places to check for.\n     * @returns A promise which will be resolved if all places are ensured.\n     */StoreLocator.prototype.ensurePlaceLocations=function ensurePlaceLocations(places){var _this10=this;return new Promise(function(resolve){var runningGeocodes=0;var geocoder=new _this10.constructor.google.maps.Geocoder();var _loop3=function _loop3(){if(_isArray7){if(_i8>=_iterator7.length)return 'break';_ref7=_iterator7[_i8++];}else {_i8=_iterator7.next();if(_i8.done)return 'break';_ref7=_i8.value;}var place=_ref7;if(!('geometry' in place&&'location' in place.geometry)){_this10.warn('Found place \"{1}\" doesn\\'t have a location. Full '+'object:',place.name);_this10.warn(place);_this10.info('Geocode will be determined separately. With address'+' \"{1}\".',place.name);runningGeocodes+=1; /* eslint-disable no-loop-func */geocoder.geocode({address:place.name},function(results,status){runningGeocodes-=1;if(status===_this10.constructor.google.maps.GeocoderStatus.OK)place.geometry=results[0].geometry;else {delete places[places.indexOf(place)];_this10.warn('Found place \"{1}\" couldn\\'t be geocoded by '+'google. Removing it from the places list.',place.name);}if(runningGeocodes===0)resolve(places);}); /* eslint-enable no-loop-func */}};for(var _iterator7=places,_isArray7=Array.isArray(_iterator7),_i8=0,_iterator7=_isArray7?_iterator7:_iterator7[Symbol.iterator]();;){var _ref7;var _ret3=_loop3();if(_ret3==='break')break;}});}; /**\n     * Determines the best search result from given list of candidates.\n     * Currently the nearest result to current viewport will be preferred.\n     * @param candidates - List of search results to determine best from.\n     * @returns The determined best result.\n     */StoreLocator.prototype.determineBestSearchResult=function determineBestSearchResult(candidates){var result=null;if(candidates.length){var shortestDistanceInMeter=Number.MAX_VALUE;for(var _iterator8=candidates,_isArray8=Array.isArray(_iterator8),_i9=0,_iterator8=_isArray8?_iterator8:_iterator8[Symbol.iterator]();;){var _ref8;if(_isArray8){if(_i9>=_iterator8.length)break;_ref8=_iterator8[_i9++];}else {_i9=_iterator8.next();if(_i9.done)break;_ref8=_i9.value;}var candidate=_ref8;var distanceInMeter=this.constructor.google.maps.geometry.spherical.computeDistanceBetween(candidate.geometry.location,this.map.getCenter());if(distanceInMeter<shortestDistanceInMeter){result=candidate;shortestDistanceInMeter=distanceInMeter;}}}return result;}; /**\n     * Is triggered if the complete map ist loaded.\n     * @returns The current instance.\n     */StoreLocator.prototype.onLoaded=function onLoaded(){var _this11=this;setTimeout(function(){return _this11.$domNode.find('input').animate.apply(_this11.$domNode.find('input'),_this11._options.input.showAnimation);},this._options.showInputAfterLoadedDelayInMilliseconds);return this;}; /**\n     * Registers given store to the google maps canvas.\n     * @param store - Store object to create a marker for.\n     * @returns The created marker.\n     */StoreLocator.prototype.createMarker=function createMarker(store){var index=0;while(this.seenLocations.includes(store.latitude+'-'+store.longitude)){if(index%2)store.latitude+=this._options.distanceToMoveByDuplicatedEntries;else store.longitude+=this._options.distanceToMoveByDuplicatedEntries;index+=1;}this.seenLocations.push(store.latitude+'-'+store.longitude);var marker={position:new this.constructor.google.maps.LatLng(store.latitude,store.longitude),map:this.map,data:store};if(store.markerIconFileName||this._options.defaultMarkerIconFileName){marker.icon=_jquery2.default.extend({},this._options.marker.icon);if(marker.icon.size)marker.icon.size=new this.constructor.google.maps.Size(marker.icon.size.width,marker.icon.size.height,marker.icon.size.unit,marker.icon.size.unit);if(marker.icon.scaledSize)marker.icon.scaledSize=new this.constructor.google.maps.Size(marker.icon.scaledSize.width,marker.icon.scaledSize.height,marker.icon.scaledSize.unit,marker.icon.scaledSize.unit);if(store.markerIconFileName)marker.icon.url=this._options.iconPath+store.markerIconFileName;else marker.icon.url=this._options.iconPath+this._options.defaultMarkerIconFileName;}if(store.title)marker.title=store.title;marker.infoWindow=new this.constructor.google.maps.InfoWindow({content:''});marker.infoWindow.isOpen=false;this.constructor.google.maps.event.addListener(marker.infoWindow,'closeclick',function(){marker.infoWindow.isOpen=false;});marker.nativeMarker=new this.constructor.google.maps.Marker(marker);this.constructor.google.maps.event.addListener(marker.nativeMarker,'click',this.getMethod('openMarker',this,marker));this.markers.push(marker);return marker.nativeMarker;}; /**\n     * Opens given marker info window. And closes a potential opened windows.\n     * @param marker - Marker to open.\n     * @param event - Event which has triggered the marker opening call.\n     * @returns The current instance.\n     */StoreLocator.prototype.openMarker=function openMarker(marker,event){if(event)event.stopPropagation();this.highlightMarker(marker,event,'stop'); /*\n            We have to ensure that the minimum zoom level has one more then\n            the clustering can appear. Since a cluster hides an open window.\n        */if('cluster' in this._options.marker&&this._options.marker.cluster.maxZoom&&this.map.getZoom()<=this._options.marker.cluster.maxZoom)this.map.setZoom(this._options.marker.cluster.maxZoom+1);this.closeSearchResults(event);if(this.currentlyOpenWindow===marker.infoWindow&&this.currentlyOpenWindow.isOpen)return this;this.fireEvent('infoWindowOpen',event,marker);marker.refreshSize=function(){return  (// Simulates a content update to enforce info box size adjusting.\nmarker.infoWindow.setContent(marker.infoWindow.getContent()));};var infoWindow=this.makeInfoWindow(marker);if(typeof infoWindow==='string')marker.infoWindow.setContent(infoWindow);else {marker.infoWindow.setContent(this._options.infoWindow.loadingContent);infoWindow.then(function(infoWindow){return marker.infoWindow.setContent(infoWindow);});}if(this.currentlyOpenWindow){this.currentlyOpenWindow.isOpen=false;this.currentlyOpenWindow.close();}this.currentlyOpenWindow=marker.infoWindow;marker.infoWindow.isOpen=true;marker.infoWindow.open(this.map,marker.nativeMarker);this.map.panTo(marker.nativeMarker.position);this.map.panBy(0,-this._options.infoWindow.additionalMoveToBottomInPixel);this.fireEvent('infoWindowOpened',event,marker);return this;}; /**\n     * Focuses given place on map.\n     * @param place - Place to open.\n     * @param event - Event object which has triggered requested place opening.\n     * @returns The current instance.\n     */StoreLocator.prototype.openPlace=function openPlace(place,event){if(event)event.stopPropagation();this.closeSearchResults(event);if(this.currentlyOpenWindow){this.currentlyOpenWindow.isOpen=false;this.currentlyOpenWindow.close();}this.map.setCenter(place.geometry.location);this.map.setZoom(this._options.successfulSearchZoom);return this;}; /**\n     * Opens given marker info window. And closes a potential opened windows.\n     * @param marker - Marker to Highlight.\n     * @param event - Event object for corresponding event that has the\n     * highlighting requested.\n     * @param type - Type of highlighting.\n     * @returns The current instance.\n     */StoreLocator.prototype.highlightMarker=function highlightMarker(marker,event){var type=arguments.length<=2||arguments[2]===undefined?'bounce':arguments[2];if(event)event.stopPropagation();if(this.currentlyHighlightedMarker){if('nativeMarker' in this.currentlyHighlightedMarker)this.currentlyHighlightedMarker.nativeMarker.setAnimation(null);this.currentlyHighlightedMarker.isHighlighted=false;this.currentlyHighlightedMarker=null;}if('nativeMarker' in marker)if(type==='stop')marker.nativeMarker.setAnimation(null);else { /*\n                    We have to ensure that the minimum zoom level has one more\n                    then the clustering can appear. Since a cluster hides an\n                    open window.\n                */if('cluster' in this._options.marker&&this._options.marker.cluster.maxZoom&&this.map.getZoom()<=this._options.marker.cluster.maxZoom&&'position' in marker.nativeMarker&&this.map.getBounds().contains(marker.nativeMarker.positioning)){this.map.setCenter(marker.nativeMarker.position);this.map.setZoom(this._options.marker.cluster.maxZoom+1);}if(marker!==this.currentlyHighlightedMarker&&marker.nativeMarker){marker.nativeMarker.setAnimation(this.constructor.google.maps.Animation[type.toUpperCase()]);marker.isHighlighted=true;this.currentlyHighlightedMarker=marker;}this.fireEvent('markerHighlighted',marker);}return this;}; /**\n     * Takes the marker for a store and creates the HTML content of the info\n     * window.\n     * @param marker - Marker to generate info window for.\n     * @returns Info window markup.\n     */StoreLocator.prototype.makeInfoWindow=function makeInfoWindow(marker){if(_jquery2.default.isFunction(this._options.infoWindow.content))return this._options.infoWindow.content.apply(this,arguments);if('content' in this._options.infoWindow)return this._options.infoWindow.content;var content='<div>';for(var name in marker.data){if(marker.data.hasOwnProperty(name))content+=name+': '+marker.data[name]+'<br />';}return content+'</div>';}; /**\n     * Takes the search results and creates the HTML content of the search\n     * results.\n     * @param searchResults - Search result to generate markup for.\n     * @returns Generated markup.\n     */StoreLocator.prototype.makeSearchResults=function makeSearchResults(searchResults){if(_jquery2.default.isFunction(this._options.searchBox.content))return this._options.searchBox.content.apply(this,arguments);if('content' in this._options.searchBox.content)return this._options.searchBox.content;var content='';for(var _iterator9=searchResults,_isArray9=Array.isArray(_iterator9),_i10=0,_iterator9=_isArray9?_iterator9:_iterator9[Symbol.iterator]();;){var _ref9;if(_isArray9){if(_i10>=_iterator9.length)break;_ref9=_iterator9[_i10++];}else {_i10=_iterator9.next();if(_i10.done)break;_ref9=_i10.value;}var result=_ref9;content+='<div>';for(var name in result.data){if(result.data.hasOwnProperty(name))content+=name+': '+result.data[name]+'<br />';}content+='</div>';}return content;};return StoreLocator;}(_jquery2.default.Tools.class); // endregion\nStoreLocator._name='StoreLocator';_jquery2.default.fn.StoreLocator=function(){return _jquery2.default.Tools().controller(StoreLocator,arguments,this);}; /** The jQuery-storeLocator plugin class. */exports.default=StoreLocator; // region vim modline\n// vim: set tabstop=4 shiftwidth=4 expandtab:\n// vim: foldmethod=marker foldmarker=region,endregion:\n// endregion\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/webpack/buildin/module.js */ 6)(module)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 3 */
/*!*****************!*\
  !*** ./test.js ***!
  \*****************/
/***/ function(module, exports, __webpack_require__) {

	eval("// #!/usr/bin/env node\n// -*- coding: utf-8 -*-\n'use strict'; /* !\n    region header\n    Copyright Torben Sickert (info[\"~at~\"]torben.website) 16.12.2012\n\n    License\n    -------\n\n    This library written by Torben Sickert stand under a creative commons\n    naming 3.0 unported license.\n    See http://creativecommons.org/licenses/by/3.0/deed.de\n    endregion\n*/ // region imports\nvar _browserAPI=__webpack_require__(/*! webOptimizer/browserAPI */ 5);var _browserAPI2=_interopRequireDefault(_browserAPI);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};} // endregion\n// endregion\n// region declaration\n// endregion\n// region types\nvar QUnit= true?__webpack_require__(/*! qunit-cli */ 11):require('qunitjs');(0,_browserAPI2.default)(function(browserAPI){var $=__webpack_require__(/*! jquery */ 1);$.context=browserAPI.window.document;__webpack_require__(/*! ./index */ 2); // region configuration\nQUnit.config=$.extend(QUnit.config||{},{ /*\n        notrycatch: true,\n        noglobals: true,\n        */altertitle:true,autostart:true,fixture:'',hidepassed:false,maxDepth:3,reorder:false,requireExpects:false,testTimeout:30*1000,scrolltop:false});$('#qunit-fixture').append('<store-locator><input></store-locator>');var $storeLocatorDeferred=$('store-locator').StoreLocator(); // endregion\n$storeLocatorDeferred.always(function($storeLocatorDomNode){var storeLocator=$storeLocatorDomNode.data('StoreLocator'); // region tests\n// / region public methods\n// //  region special\nQUnit.test('initialize',function(assert){assert.ok(storeLocator);assert.ok($storeLocatorDomNode.children('div').length>0);var $inputDomNode=$storeLocatorDomNode.find('input');assert.ok($inputDomNode.length>0);$inputDomNode.val('a');var $resultsDomNode=$storeLocatorDomNode.find('.store-locator-search-results'); // TODO assert.ok($resultsDomNode.length)\n}); // // endregion\n// / endregion\n// endregion\nif(true){browserAPI.window.close();QUnit.load();}}); // region hot module replacement\n/*\n        NOTE: hot module replacement doesn't work with async tests yet since\n        qunit is not resetable yet:\n\n        if (typeof module === 'object' && 'hot' in module && module.hot) {\n            module.hot.accept()\n            // IgnoreTypeCheck\n            module.hot.dispose(():void => {\n                QUnit.reset()\n                console.clear()\n            }\n        }\n    */ // endregion\n}); // region vim modline\n// vim: set tabstop=4 shiftwidth=4 expandtab:\n// vim: foldmethod=marker foldmarker=region,endregion:\n// endregion\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy90ZXN0LmpzPzFkZDIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbi8vICMhL3Vzci9iaW4vZW52IG5vZGVcbi8vIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuJ3VzZSBzdHJpY3QnXG4vKiAhXG4gICAgcmVnaW9uIGhlYWRlclxuICAgIENvcHlyaWdodCBUb3JiZW4gU2lja2VydCAoaW5mb1tcIn5hdH5cIl10b3JiZW4ud2Vic2l0ZSkgMTYuMTIuMjAxMlxuXG4gICAgTGljZW5zZVxuICAgIC0tLS0tLS1cblxuICAgIFRoaXMgbGlicmFyeSB3cml0dGVuIGJ5IFRvcmJlbiBTaWNrZXJ0IHN0YW5kIHVuZGVyIGEgY3JlYXRpdmUgY29tbW9uc1xuICAgIG5hbWluZyAzLjAgdW5wb3J0ZWQgbGljZW5zZS5cbiAgICBTZWUgaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnkvMy4wL2RlZWQuZGVcbiAgICBlbmRyZWdpb25cbiovXG4vLyByZWdpb24gaW1wb3J0c1xuaW1wb3J0IGJyb3dzZXJBUEkgZnJvbSAnd2ViT3B0aW1pemVyL2Jyb3dzZXJBUEknXG5pbXBvcnQgdHlwZSB7QnJvd3NlckFQSX0gZnJvbSAnd2ViT3B0aW1pemVyL3R5cGUnXG5pbXBvcnQgdHlwZSB7JERvbU5vZGUsICREZWZlcnJlZH0gZnJvbSAnalF1ZXJ5LXRvb2xzJ1xuaW1wb3J0IHR5cGUgU3RvcmVMb2NhdG9yIGZyb20gJy4vaW5kZXgnXG4vLyBlbmRyZWdpb25cbi8vIHJlZ2lvbiBkZWNsYXJhdGlvblxuZGVjbGFyZSB2YXIgVEFSR0VUX1RFQ0hOT0xPR1k6c3RyaW5nXG4vLyBlbmRyZWdpb25cbi8vIHJlZ2lvbiB0eXBlc1xudHlwZSBKUXVlcnlGdW5jdGlvbiA9IChvYmplY3Q6YW55KSA9PiBPYmplY3Rcbi8vIGVuZHJlZ2lvblxuY29uc3QgUVVuaXQ6T2JqZWN0ID0gKFRBUkdFVF9URUNITk9MT0dZID09PSAnbm9kZScpID8gcmVxdWlyZShcbiAgICAncXVuaXQtY2xpJ1xuKSA6IHJlcXVpcmUoJ3F1bml0anMnKVxuYnJvd3NlckFQSSgoYnJvd3NlckFQSTpCcm93c2VyQVBJKTp2b2lkID0+IHtcbiAgICBjb25zdCAkOkpRdWVyeUZ1bmN0aW9uID0gcmVxdWlyZSgnanF1ZXJ5JylcbiAgICAkLmNvbnRleHQgPSBicm93c2VyQVBJLndpbmRvdy5kb2N1bWVudFxuICAgIHJlcXVpcmUoJy4vaW5kZXgnKVxuICAgIC8vIHJlZ2lvbiBjb25maWd1cmF0aW9uXG4gICAgUVVuaXQuY29uZmlnID0gJC5leHRlbmQoUVVuaXQuY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIC8qXG4gICAgICAgIG5vdHJ5Y2F0Y2g6IHRydWUsXG4gICAgICAgIG5vZ2xvYmFsczogdHJ1ZSxcbiAgICAgICAgKi9cbiAgICAgICAgYWx0ZXJ0aXRsZTogdHJ1ZSxcbiAgICAgICAgYXV0b3N0YXJ0OiB0cnVlLFxuICAgICAgICBmaXh0dXJlOiAnJyxcbiAgICAgICAgaGlkZXBhc3NlZDogZmFsc2UsXG4gICAgICAgIG1heERlcHRoOiAzLFxuICAgICAgICByZW9yZGVyOiBmYWxzZSxcbiAgICAgICAgcmVxdWlyZUV4cGVjdHM6IGZhbHNlLFxuICAgICAgICB0ZXN0VGltZW91dDogMzAgKiAxMDAwLFxuICAgICAgICBzY3JvbGx0b3A6IGZhbHNlXG4gICAgfSlcbiAgICAkKCcjcXVuaXQtZml4dHVyZScpLmFwcGVuZCgnPHN0b3JlLWxvY2F0b3I+PGlucHV0Pjwvc3RvcmUtbG9jYXRvcj4nKVxuICAgIGNvbnN0ICRzdG9yZUxvY2F0b3JEZWZlcnJlZDokRGVmZXJyZWQ8JERvbU5vZGU+ID0gJChcbiAgICAgICAgJ3N0b3JlLWxvY2F0b3InXG4gICAgKS5TdG9yZUxvY2F0b3IoKVxuICAgIC8vIGVuZHJlZ2lvblxuICAgICRzdG9yZUxvY2F0b3JEZWZlcnJlZC5hbHdheXMoKCRzdG9yZUxvY2F0b3JEb21Ob2RlOiREb21Ob2RlKTp2b2lkID0+IHtcbiAgICAgICAgY29uc3Qgc3RvcmVMb2NhdG9yOiREZWZlcnJlZDxTdG9yZUxvY2F0b3I+ID0gJHN0b3JlTG9jYXRvckRvbU5vZGUuZGF0YShcbiAgICAgICAgICAgICdTdG9yZUxvY2F0b3InKVxuICAgICAgICAvLyByZWdpb24gdGVzdHNcbiAgICAgICAgLy8gLyByZWdpb24gcHVibGljIG1ldGhvZHNcbiAgICAgICAgLy8gLy8gIHJlZ2lvbiBzcGVjaWFsXG4gICAgICAgIFFVbml0LnRlc3QoJ2luaXRpYWxpemUnLCAoYXNzZXJ0Ok9iamVjdCk6dm9pZCA9PiB7XG4gICAgICAgICAgICBhc3NlcnQub2soc3RvcmVMb2NhdG9yKVxuICAgICAgICAgICAgYXNzZXJ0Lm9rKCRzdG9yZUxvY2F0b3JEb21Ob2RlLmNoaWxkcmVuKCdkaXYnKS5sZW5ndGggPiAwKVxuICAgICAgICAgICAgY29uc3QgJGlucHV0RG9tTm9kZTokRG9tTm9kZSA9ICRzdG9yZUxvY2F0b3JEb21Ob2RlLmZpbmQoJ2lucHV0JylcbiAgICAgICAgICAgIGFzc2VydC5vaygkaW5wdXREb21Ob2RlLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAkaW5wdXREb21Ob2RlLnZhbCgnYScpXG4gICAgICAgICAgICBjb25zdCAkcmVzdWx0c0RvbU5vZGU6JERvbU5vZGUgPSAkc3RvcmVMb2NhdG9yRG9tTm9kZS5maW5kKFxuICAgICAgICAgICAgICAgICcuc3RvcmUtbG9jYXRvci1zZWFyY2gtcmVzdWx0cycpXG4gICAgICAgICAgICAvLyBUT0RPIGFzc2VydC5vaygkcmVzdWx0c0RvbU5vZGUubGVuZ3RoKVxuICAgICAgICB9KVxuICAgICAgICAvLyAvLyBlbmRyZWdpb25cbiAgICAgICAgLy8gLyBlbmRyZWdpb25cbiAgICAgICAgLy8gZW5kcmVnaW9uXG4gICAgICAgIGlmIChUQVJHRVRfVEVDSE5PTE9HWSA9PT0gJ25vZGUnKSB7XG4gICAgICAgICAgICBicm93c2VyQVBJLndpbmRvdy5jbG9zZSgpXG4gICAgICAgICAgICBRVW5pdC5sb2FkKClcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLy8gcmVnaW9uIGhvdCBtb2R1bGUgcmVwbGFjZW1lbnRcbiAgICAvKlxuICAgICAgICBOT1RFOiBob3QgbW9kdWxlIHJlcGxhY2VtZW50IGRvZXNuJ3Qgd29yayB3aXRoIGFzeW5jIHRlc3RzIHlldCBzaW5jZVxuICAgICAgICBxdW5pdCBpcyBub3QgcmVzZXRhYmxlIHlldDpcblxuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgJ2hvdCcgaW4gbW9kdWxlICYmIG1vZHVsZS5ob3QpIHtcbiAgICAgICAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICAgICAgICAgIC8vIElnbm9yZVR5cGVDaGVja1xuICAgICAgICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKCgpOnZvaWQgPT4ge1xuICAgICAgICAgICAgICAgIFFVbml0LnJlc2V0KClcbiAgICAgICAgICAgICAgICBjb25zb2xlLmNsZWFyKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICovXG4gICAgLy8gZW5kcmVnaW9uXG59KVxuLy8gcmVnaW9uIHZpbSBtb2RsaW5lXG4vLyB2aW06IHNldCB0YWJzdG9wPTQgc2hpZnR3aWR0aD00IGV4cGFuZHRhYjpcbi8vIHZpbTogZm9sZG1ldGhvZD1tYXJrZXIgZm9sZG1hcmtlcj1yZWdpb24sZW5kcmVnaW9uOlxuLy8gZW5kcmVnaW9uXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB0ZXN0LmpzXG4gKiovIl0sIm1hcHBpbmdzIjoiOztBQUdBOzs7Ozs7Ozs7Ozs7QUFjQTs7Ozs7QUFXQTtBQVFBOzs7QUFLQTtBQWVBOzs7QUFNQTtBQVNBOzs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 4 */
/*!*******************************************************************************************************************************************!*\
  !*** ./~/exports-loader?Class=MarkerClusterer,google=google!./~/imports-loader?google=>{}!./~/js-marker-clusterer/src/markerclusterer.js ***!
  \*******************************************************************************************************************************************/
/***/ function(module, exports) {

	eval("/*** IMPORTS FROM imports-loader ***/\nvar google = {};\n\n// ==ClosureCompiler==\n// @compilation_level ADVANCED_OPTIMIZATIONS\n// @externs_url http://closure-compiler.googlecode.com/svn/trunk/contrib/externs/maps/google_maps_api_v3_3.js\n// ==/ClosureCompiler==\n\n/**\n * @name MarkerClusterer for Google Maps v3\n * @version version 1.0\n * @author Luke Mahe\n * @fileoverview\n * The library creates and manages per-zoom-level clusters for large amounts of\n * markers.\n * <br/>\n * This is a v3 implementation of the\n * <a href=\"http://gmaps-utility-library-dev.googlecode.com/svn/tags/markerclusterer/\"\n * >v2 MarkerClusterer</a>.\n */\n\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A Marker Clusterer that clusters markers.\n *\n * @param {google.maps.Map} map The Google map to attach to.\n * @param {Array.<google.maps.Marker>=} opt_markers Optional markers to add to\n *   the cluster.\n * @param {Object=} opt_options support the following options:\n *     'gridSize': (number) The grid size of a cluster in pixels.\n *     'maxZoom': (number) The maximum zoom level that a marker can be part of a\n *                cluster.\n *     'zoomOnClick': (boolean) Whether the default behaviour of clicking on a\n *                    cluster is to zoom into it.\n *     'averageCenter': (boolean) Wether the center of each cluster should be\n *                      the average of all markers in the cluster.\n *     'minimumClusterSize': (number) The minimum number of markers to be in a\n *                           cluster before the markers are hidden and a count\n *                           is shown.\n *     'styles': (object) An object that has style properties:\n *       'url': (string) The image url.\n *       'height': (number) The image height.\n *       'width': (number) The image width.\n *       'anchor': (Array) The anchor position of the label text.\n *       'textColor': (string) The text color.\n *       'textSize': (number) The text size.\n *       'backgroundPosition': (string) The position of the backgound x, y.\n *       'iconAnchor': (Array) The anchor position of the icon x, y.\n * @constructor\n * @extends google.maps.OverlayView\n */\nfunction MarkerClusterer(map, opt_markers, opt_options) {\n  // MarkerClusterer implements google.maps.OverlayView interface. We use the\n  // extend function to extend MarkerClusterer with google.maps.OverlayView\n  // because it might not always be available when the code is defined so we\n  // look for it at the last possible moment. If it doesn't exist now then\n  // there is no point going ahead :)\n  this.extend(MarkerClusterer, google.maps.OverlayView);\n  this.map_ = map;\n\n  /**\n   * @type {Array.<google.maps.Marker>}\n   * @private\n   */\n  this.markers_ = [];\n\n  /**\n   *  @type {Array.<Cluster>}\n   */\n  this.clusters_ = [];\n\n  this.sizes = [53, 56, 66, 78, 90];\n\n  /**\n   * @private\n   */\n  this.styles_ = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.ready_ = false;\n\n  var options = opt_options || {};\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.gridSize_ = options['gridSize'] || 60;\n\n  /**\n   * @private\n   */\n  this.minClusterSize_ = options['minimumClusterSize'] || 2;\n\n\n  /**\n   * @type {?number}\n   * @private\n   */\n  this.maxZoom_ = options['maxZoom'] || null;\n\n  this.styles_ = options['styles'] || [];\n\n  /**\n   * @type {string}\n   * @private\n   */\n  this.imagePath_ = options['imagePath'] ||\n      this.MARKER_CLUSTER_IMAGE_PATH_;\n\n  /**\n   * @type {string}\n   * @private\n   */\n  this.imageExtension_ = options['imageExtension'] ||\n      this.MARKER_CLUSTER_IMAGE_EXTENSION_;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.zoomOnClick_ = true;\n\n  if (options['zoomOnClick'] != undefined) {\n    this.zoomOnClick_ = options['zoomOnClick'];\n  }\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.averageCenter_ = false;\n\n  if (options['averageCenter'] != undefined) {\n    this.averageCenter_ = options['averageCenter'];\n  }\n\n  this.setupStyles_();\n\n  this.setMap(map);\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.prevZoom_ = this.map_.getZoom();\n\n  // Add the map event listeners\n  var that = this;\n  google.maps.event.addListener(this.map_, 'zoom_changed', function() {\n    var zoom = that.map_.getZoom();\n\n    if (that.prevZoom_ != zoom) {\n      that.prevZoom_ = zoom;\n      that.resetViewport();\n    }\n  });\n\n  google.maps.event.addListener(this.map_, 'idle', function() {\n    that.redraw();\n  });\n\n  // Finally, add the markers\n  if (opt_markers && opt_markers.length) {\n    this.addMarkers(opt_markers, false);\n  }\n}\n\n\n/**\n * The marker cluster image path.\n *\n * @type {string}\n * @private\n */\nMarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_PATH_ =\n    'http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/' +\n    'images/m';\n\n\n/**\n * The marker cluster image path.\n *\n * @type {string}\n * @private\n */\nMarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_EXTENSION_ = 'png';\n\n\n/**\n * Extends a objects prototype by anothers.\n *\n * @param {Object} obj1 The object to be extended.\n * @param {Object} obj2 The object to extend with.\n * @return {Object} The new extended object.\n * @ignore\n */\nMarkerClusterer.prototype.extend = function(obj1, obj2) {\n  return (function(object) {\n    for (var property in object.prototype) {\n      this.prototype[property] = object.prototype[property];\n    }\n    return this;\n  }).apply(obj1, [obj2]);\n};\n\n\n/**\n * Implementaion of the interface method.\n * @ignore\n */\nMarkerClusterer.prototype.onAdd = function() {\n  this.setReady_(true);\n};\n\n/**\n * Implementaion of the interface method.\n * @ignore\n */\nMarkerClusterer.prototype.draw = function() {};\n\n/**\n * Sets up the styles object.\n *\n * @private\n */\nMarkerClusterer.prototype.setupStyles_ = function() {\n  if (this.styles_.length) {\n    return;\n  }\n\n  for (var i = 0, size; size = this.sizes[i]; i++) {\n    this.styles_.push({\n      url: this.imagePath_ + (i + 1) + '.' + this.imageExtension_,\n      height: size,\n      width: size\n    });\n  }\n};\n\n/**\n *  Fit the map to the bounds of the markers in the clusterer.\n */\nMarkerClusterer.prototype.fitMapToMarkers = function() {\n  var markers = this.getMarkers();\n  var bounds = new google.maps.LatLngBounds();\n  for (var i = 0, marker; marker = markers[i]; i++) {\n    bounds.extend(marker.getPosition());\n  }\n\n  this.map_.fitBounds(bounds);\n};\n\n\n/**\n *  Sets the styles.\n *\n *  @param {Object} styles The style to set.\n */\nMarkerClusterer.prototype.setStyles = function(styles) {\n  this.styles_ = styles;\n};\n\n\n/**\n *  Gets the styles.\n *\n *  @return {Object} The styles object.\n */\nMarkerClusterer.prototype.getStyles = function() {\n  return this.styles_;\n};\n\n\n/**\n * Whether zoom on click is set.\n *\n * @return {boolean} True if zoomOnClick_ is set.\n */\nMarkerClusterer.prototype.isZoomOnClick = function() {\n  return this.zoomOnClick_;\n};\n\n/**\n * Whether average center is set.\n *\n * @return {boolean} True if averageCenter_ is set.\n */\nMarkerClusterer.prototype.isAverageCenter = function() {\n  return this.averageCenter_;\n};\n\n\n/**\n *  Returns the array of markers in the clusterer.\n *\n *  @return {Array.<google.maps.Marker>} The markers.\n */\nMarkerClusterer.prototype.getMarkers = function() {\n  return this.markers_;\n};\n\n\n/**\n *  Returns the number of markers in the clusterer\n *\n *  @return {Number} The number of markers.\n */\nMarkerClusterer.prototype.getTotalMarkers = function() {\n  return this.markers_.length;\n};\n\n\n/**\n *  Sets the max zoom for the clusterer.\n *\n *  @param {number} maxZoom The max zoom level.\n */\nMarkerClusterer.prototype.setMaxZoom = function(maxZoom) {\n  this.maxZoom_ = maxZoom;\n};\n\n\n/**\n *  Gets the max zoom for the clusterer.\n *\n *  @return {number} The max zoom level.\n */\nMarkerClusterer.prototype.getMaxZoom = function() {\n  return this.maxZoom_;\n};\n\n\n/**\n *  The function for calculating the cluster icon image.\n *\n *  @param {Array.<google.maps.Marker>} markers The markers in the clusterer.\n *  @param {number} numStyles The number of styles available.\n *  @return {Object} A object properties: 'text' (string) and 'index' (number).\n *  @private\n */\nMarkerClusterer.prototype.calculator_ = function(markers, numStyles) {\n  var index = 0;\n  var count = markers.length;\n  var dv = count;\n  while (dv !== 0) {\n    dv = parseInt(dv / 10, 10);\n    index++;\n  }\n\n  index = Math.min(index, numStyles);\n  return {\n    text: count,\n    index: index\n  };\n};\n\n\n/**\n * Set the calculator function.\n *\n * @param {function(Array, number)} calculator The function to set as the\n *     calculator. The function should return a object properties:\n *     'text' (string) and 'index' (number).\n *\n */\nMarkerClusterer.prototype.setCalculator = function(calculator) {\n  this.calculator_ = calculator;\n};\n\n\n/**\n * Get the calculator function.\n *\n * @return {function(Array, number)} the calculator function.\n */\nMarkerClusterer.prototype.getCalculator = function() {\n  return this.calculator_;\n};\n\n\n/**\n * Add an array of markers to the clusterer.\n *\n * @param {Array.<google.maps.Marker>} markers The markers to add.\n * @param {boolean=} opt_nodraw Whether to redraw the clusters.\n */\nMarkerClusterer.prototype.addMarkers = function(markers, opt_nodraw) {\n  for (var i = 0, marker; marker = markers[i]; i++) {\n    this.pushMarkerTo_(marker);\n  }\n  if (!opt_nodraw) {\n    this.redraw();\n  }\n};\n\n\n/**\n * Pushes a marker to the clusterer.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @private\n */\nMarkerClusterer.prototype.pushMarkerTo_ = function(marker) {\n  marker.isAdded = false;\n  if (marker['draggable']) {\n    // If the marker is draggable add a listener so we update the clusters on\n    // the drag end.\n    var that = this;\n    google.maps.event.addListener(marker, 'dragend', function() {\n      marker.isAdded = false;\n      that.repaint();\n    });\n  }\n  this.markers_.push(marker);\n};\n\n\n/**\n * Adds a marker to the clusterer and redraws if needed.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @param {boolean=} opt_nodraw Whether to redraw the clusters.\n */\nMarkerClusterer.prototype.addMarker = function(marker, opt_nodraw) {\n  this.pushMarkerTo_(marker);\n  if (!opt_nodraw) {\n    this.redraw();\n  }\n};\n\n\n/**\n * Removes a marker and returns true if removed, false if not\n *\n * @param {google.maps.Marker} marker The marker to remove\n * @return {boolean} Whether the marker was removed or not\n * @private\n */\nMarkerClusterer.prototype.removeMarker_ = function(marker) {\n  var index = -1;\n  if (this.markers_.indexOf) {\n    index = this.markers_.indexOf(marker);\n  } else {\n    for (var i = 0, m; m = this.markers_[i]; i++) {\n      if (m == marker) {\n        index = i;\n        break;\n      }\n    }\n  }\n\n  if (index == -1) {\n    // Marker is not in our list of markers.\n    return false;\n  }\n\n  marker.setMap(null);\n\n  this.markers_.splice(index, 1);\n\n  return true;\n};\n\n\n/**\n * Remove a marker from the cluster.\n *\n * @param {google.maps.Marker} marker The marker to remove.\n * @param {boolean=} opt_nodraw Optional boolean to force no redraw.\n * @return {boolean} True if the marker was removed.\n */\nMarkerClusterer.prototype.removeMarker = function(marker, opt_nodraw) {\n  var removed = this.removeMarker_(marker);\n\n  if (!opt_nodraw && removed) {\n    this.resetViewport();\n    this.redraw();\n    return true;\n  } else {\n   return false;\n  }\n};\n\n\n/**\n * Removes an array of markers from the cluster.\n *\n * @param {Array.<google.maps.Marker>} markers The markers to remove.\n * @param {boolean=} opt_nodraw Optional boolean to force no redraw.\n */\nMarkerClusterer.prototype.removeMarkers = function(markers, opt_nodraw) {\n  var removed = false;\n\n  for (var i = 0, marker; marker = markers[i]; i++) {\n    var r = this.removeMarker_(marker);\n    removed = removed || r;\n  }\n\n  if (!opt_nodraw && removed) {\n    this.resetViewport();\n    this.redraw();\n    return true;\n  }\n};\n\n\n/**\n * Sets the clusterer's ready state.\n *\n * @param {boolean} ready The state.\n * @private\n */\nMarkerClusterer.prototype.setReady_ = function(ready) {\n  if (!this.ready_) {\n    this.ready_ = ready;\n    this.createClusters_();\n  }\n};\n\n\n/**\n * Returns the number of clusters in the clusterer.\n *\n * @return {number} The number of clusters.\n */\nMarkerClusterer.prototype.getTotalClusters = function() {\n  return this.clusters_.length;\n};\n\n\n/**\n * Returns the google map that the clusterer is associated with.\n *\n * @return {google.maps.Map} The map.\n */\nMarkerClusterer.prototype.getMap = function() {\n  return this.map_;\n};\n\n\n/**\n * Sets the google map that the clusterer is associated with.\n *\n * @param {google.maps.Map} map The map.\n */\nMarkerClusterer.prototype.setMap = function(map) {\n  this.map_ = map;\n};\n\n\n/**\n * Returns the size of the grid.\n *\n * @return {number} The grid size.\n */\nMarkerClusterer.prototype.getGridSize = function() {\n  return this.gridSize_;\n};\n\n\n/**\n * Sets the size of the grid.\n *\n * @param {number} size The grid size.\n */\nMarkerClusterer.prototype.setGridSize = function(size) {\n  this.gridSize_ = size;\n};\n\n\n/**\n * Returns the min cluster size.\n *\n * @return {number} The grid size.\n */\nMarkerClusterer.prototype.getMinClusterSize = function() {\n  return this.minClusterSize_;\n};\n\n/**\n * Sets the min cluster size.\n *\n * @param {number} size The grid size.\n */\nMarkerClusterer.prototype.setMinClusterSize = function(size) {\n  this.minClusterSize_ = size;\n};\n\n\n/**\n * Extends a bounds object by the grid size.\n *\n * @param {google.maps.LatLngBounds} bounds The bounds to extend.\n * @return {google.maps.LatLngBounds} The extended bounds.\n */\nMarkerClusterer.prototype.getExtendedBounds = function(bounds) {\n  var projection = this.getProjection();\n\n  // Turn the bounds into latlng.\n  var tr = new google.maps.LatLng(bounds.getNorthEast().lat(),\n      bounds.getNorthEast().lng());\n  var bl = new google.maps.LatLng(bounds.getSouthWest().lat(),\n      bounds.getSouthWest().lng());\n\n  // Convert the points to pixels and the extend out by the grid size.\n  var trPix = projection.fromLatLngToDivPixel(tr);\n  trPix.x += this.gridSize_;\n  trPix.y -= this.gridSize_;\n\n  var blPix = projection.fromLatLngToDivPixel(bl);\n  blPix.x -= this.gridSize_;\n  blPix.y += this.gridSize_;\n\n  // Convert the pixel points back to LatLng\n  var ne = projection.fromDivPixelToLatLng(trPix);\n  var sw = projection.fromDivPixelToLatLng(blPix);\n\n  // Extend the bounds to contain the new bounds.\n  bounds.extend(ne);\n  bounds.extend(sw);\n\n  return bounds;\n};\n\n\n/**\n * Determins if a marker is contained in a bounds.\n *\n * @param {google.maps.Marker} marker The marker to check.\n * @param {google.maps.LatLngBounds} bounds The bounds to check against.\n * @return {boolean} True if the marker is in the bounds.\n * @private\n */\nMarkerClusterer.prototype.isMarkerInBounds_ = function(marker, bounds) {\n  return bounds.contains(marker.getPosition());\n};\n\n\n/**\n * Clears all clusters and markers from the clusterer.\n */\nMarkerClusterer.prototype.clearMarkers = function() {\n  this.resetViewport(true);\n\n  // Set the markers a empty array.\n  this.markers_ = [];\n};\n\n\n/**\n * Clears all existing clusters and recreates them.\n * @param {boolean} opt_hide To also hide the marker.\n */\nMarkerClusterer.prototype.resetViewport = function(opt_hide) {\n  // Remove all the clusters\n  for (var i = 0, cluster; cluster = this.clusters_[i]; i++) {\n    cluster.remove();\n  }\n\n  // Reset the markers to not be added and to be invisible.\n  for (var i = 0, marker; marker = this.markers_[i]; i++) {\n    marker.isAdded = false;\n    if (opt_hide) {\n      marker.setMap(null);\n    }\n  }\n\n  this.clusters_ = [];\n};\n\n/**\n *\n */\nMarkerClusterer.prototype.repaint = function() {\n  var oldClusters = this.clusters_.slice();\n  this.clusters_.length = 0;\n  this.resetViewport();\n  this.redraw();\n\n  // Remove the old clusters.\n  // Do it in a timeout so the other clusters have been drawn first.\n  window.setTimeout(function() {\n    for (var i = 0, cluster; cluster = oldClusters[i]; i++) {\n      cluster.remove();\n    }\n  }, 0);\n};\n\n\n/**\n * Redraws the clusters.\n */\nMarkerClusterer.prototype.redraw = function() {\n  this.createClusters_();\n};\n\n\n/**\n * Calculates the distance between two latlng locations in km.\n * @see http://www.movable-type.co.uk/scripts/latlong.html\n *\n * @param {google.maps.LatLng} p1 The first lat lng point.\n * @param {google.maps.LatLng} p2 The second lat lng point.\n * @return {number} The distance between the two points in km.\n * @private\n*/\nMarkerClusterer.prototype.distanceBetweenPoints_ = function(p1, p2) {\n  if (!p1 || !p2) {\n    return 0;\n  }\n\n  var R = 6371; // Radius of the Earth in km\n  var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;\n  var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) *\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  return d;\n};\n\n\n/**\n * Add a marker to a cluster, or creates a new cluster.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @private\n */\nMarkerClusterer.prototype.addToClosestCluster_ = function(marker) {\n  var distance = 40000; // Some large number\n  var clusterToAddTo = null;\n  var pos = marker.getPosition();\n  for (var i = 0, cluster; cluster = this.clusters_[i]; i++) {\n    var center = cluster.getCenter();\n    if (center) {\n      var d = this.distanceBetweenPoints_(center, marker.getPosition());\n      if (d < distance) {\n        distance = d;\n        clusterToAddTo = cluster;\n      }\n    }\n  }\n\n  if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {\n    clusterToAddTo.addMarker(marker);\n  } else {\n    var cluster = new Cluster(this);\n    cluster.addMarker(marker);\n    this.clusters_.push(cluster);\n  }\n};\n\n\n/**\n * Creates the clusters.\n *\n * @private\n */\nMarkerClusterer.prototype.createClusters_ = function() {\n  if (!this.ready_) {\n    return;\n  }\n\n  // Get our current map view bounds.\n  // Create a new bounds object so we don't affect the map.\n  var mapBounds = new google.maps.LatLngBounds(this.map_.getBounds().getSouthWest(),\n      this.map_.getBounds().getNorthEast());\n  var bounds = this.getExtendedBounds(mapBounds);\n\n  for (var i = 0, marker; marker = this.markers_[i]; i++) {\n    if (!marker.isAdded && this.isMarkerInBounds_(marker, bounds)) {\n      this.addToClosestCluster_(marker);\n    }\n  }\n};\n\n\n/**\n * A cluster that contains markers.\n *\n * @param {MarkerClusterer} markerClusterer The markerclusterer that this\n *     cluster is associated with.\n * @constructor\n * @ignore\n */\nfunction Cluster(markerClusterer) {\n  this.markerClusterer_ = markerClusterer;\n  this.map_ = markerClusterer.getMap();\n  this.gridSize_ = markerClusterer.getGridSize();\n  this.minClusterSize_ = markerClusterer.getMinClusterSize();\n  this.averageCenter_ = markerClusterer.isAverageCenter();\n  this.center_ = null;\n  this.markers_ = [];\n  this.bounds_ = null;\n  this.clusterIcon_ = new ClusterIcon(this, markerClusterer.getStyles(),\n      markerClusterer.getGridSize());\n}\n\n/**\n * Determins if a marker is already added to the cluster.\n *\n * @param {google.maps.Marker} marker The marker to check.\n * @return {boolean} True if the marker is already added.\n */\nCluster.prototype.isMarkerAlreadyAdded = function(marker) {\n  if (this.markers_.indexOf) {\n    return this.markers_.indexOf(marker) != -1;\n  } else {\n    for (var i = 0, m; m = this.markers_[i]; i++) {\n      if (m == marker) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n\n/**\n * Add a marker the cluster.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @return {boolean} True if the marker was added.\n */\nCluster.prototype.addMarker = function(marker) {\n  if (this.isMarkerAlreadyAdded(marker)) {\n    return false;\n  }\n\n  if (!this.center_) {\n    this.center_ = marker.getPosition();\n    this.calculateBounds_();\n  } else {\n    if (this.averageCenter_) {\n      var l = this.markers_.length + 1;\n      var lat = (this.center_.lat() * (l-1) + marker.getPosition().lat()) / l;\n      var lng = (this.center_.lng() * (l-1) + marker.getPosition().lng()) / l;\n      this.center_ = new google.maps.LatLng(lat, lng);\n      this.calculateBounds_();\n    }\n  }\n\n  marker.isAdded = true;\n  this.markers_.push(marker);\n\n  var len = this.markers_.length;\n  if (len < this.minClusterSize_ && marker.getMap() != this.map_) {\n    // Min cluster size not reached so show the marker.\n    marker.setMap(this.map_);\n  }\n\n  if (len == this.minClusterSize_) {\n    // Hide the markers that were showing.\n    for (var i = 0; i < len; i++) {\n      this.markers_[i].setMap(null);\n    }\n  }\n\n  if (len >= this.minClusterSize_) {\n    marker.setMap(null);\n  }\n\n  this.updateIcon();\n  return true;\n};\n\n\n/**\n * Returns the marker clusterer that the cluster is associated with.\n *\n * @return {MarkerClusterer} The associated marker clusterer.\n */\nCluster.prototype.getMarkerClusterer = function() {\n  return this.markerClusterer_;\n};\n\n\n/**\n * Returns the bounds of the cluster.\n *\n * @return {google.maps.LatLngBounds} the cluster bounds.\n */\nCluster.prototype.getBounds = function() {\n  var bounds = new google.maps.LatLngBounds(this.center_, this.center_);\n  var markers = this.getMarkers();\n  for (var i = 0, marker; marker = markers[i]; i++) {\n    bounds.extend(marker.getPosition());\n  }\n  return bounds;\n};\n\n\n/**\n * Removes the cluster\n */\nCluster.prototype.remove = function() {\n  this.clusterIcon_.remove();\n  this.markers_.length = 0;\n  delete this.markers_;\n};\n\n\n/**\n * Returns the center of the cluster.\n *\n * @return {number} The cluster center.\n */\nCluster.prototype.getSize = function() {\n  return this.markers_.length;\n};\n\n\n/**\n * Returns the center of the cluster.\n *\n * @return {Array.<google.maps.Marker>} The cluster center.\n */\nCluster.prototype.getMarkers = function() {\n  return this.markers_;\n};\n\n\n/**\n * Returns the center of the cluster.\n *\n * @return {google.maps.LatLng} The cluster center.\n */\nCluster.prototype.getCenter = function() {\n  return this.center_;\n};\n\n\n/**\n * Calculated the extended bounds of the cluster with the grid.\n *\n * @private\n */\nCluster.prototype.calculateBounds_ = function() {\n  var bounds = new google.maps.LatLngBounds(this.center_, this.center_);\n  this.bounds_ = this.markerClusterer_.getExtendedBounds(bounds);\n};\n\n\n/**\n * Determines if a marker lies in the clusters bounds.\n *\n * @param {google.maps.Marker} marker The marker to check.\n * @return {boolean} True if the marker lies in the bounds.\n */\nCluster.prototype.isMarkerInClusterBounds = function(marker) {\n  return this.bounds_.contains(marker.getPosition());\n};\n\n\n/**\n * Returns the map that the cluster is associated with.\n *\n * @return {google.maps.Map} The map.\n */\nCluster.prototype.getMap = function() {\n  return this.map_;\n};\n\n\n/**\n * Updates the cluster icon\n */\nCluster.prototype.updateIcon = function() {\n  var zoom = this.map_.getZoom();\n  var mz = this.markerClusterer_.getMaxZoom();\n\n  if (mz && zoom > mz) {\n    // The zoom is greater than our max zoom so show all the markers in cluster.\n    for (var i = 0, marker; marker = this.markers_[i]; i++) {\n      marker.setMap(this.map_);\n    }\n    return;\n  }\n\n  if (this.markers_.length < this.minClusterSize_) {\n    // Min cluster size not yet reached.\n    this.clusterIcon_.hide();\n    return;\n  }\n\n  var numStyles = this.markerClusterer_.getStyles().length;\n  var sums = this.markerClusterer_.getCalculator()(this.markers_, numStyles);\n  this.clusterIcon_.setCenter(this.center_);\n  this.clusterIcon_.setSums(sums);\n  this.clusterIcon_.show();\n};\n\n\n/**\n * A cluster icon\n *\n * @param {Cluster} cluster The cluster to be associated with.\n * @param {Object} styles An object that has style properties:\n *     'url': (string) The image url.\n *     'height': (number) The image height.\n *     'width': (number) The image width.\n *     'anchor': (Array) The anchor position of the label text.\n *     'textColor': (string) The text color.\n *     'textSize': (number) The text size.\n *     'backgroundPosition: (string) The background postition x, y.\n * @param {number=} opt_padding Optional padding to apply to the cluster icon.\n * @constructor\n * @extends google.maps.OverlayView\n * @ignore\n */\nfunction ClusterIcon(cluster, styles, opt_padding) {\n  cluster.getMarkerClusterer().extend(ClusterIcon, google.maps.OverlayView);\n\n  this.styles_ = styles;\n  this.padding_ = opt_padding || 0;\n  this.cluster_ = cluster;\n  this.center_ = null;\n  this.map_ = cluster.getMap();\n  this.div_ = null;\n  this.sums_ = null;\n  this.visible_ = false;\n\n  this.setMap(this.map_);\n}\n\n\n/**\n * Triggers the clusterclick event and zoom's if the option is set.\n */\nClusterIcon.prototype.triggerClusterClick = function() {\n  var markerClusterer = this.cluster_.getMarkerClusterer();\n\n  // Trigger the clusterclick event.\n  google.maps.event.trigger(markerClusterer, 'clusterclick', this.cluster_);\n\n  if (markerClusterer.isZoomOnClick()) {\n    // Zoom into the cluster.\n    this.map_.fitBounds(this.cluster_.getBounds());\n  }\n};\n\n\n/**\n * Adding the cluster icon to the dom.\n * @ignore\n */\nClusterIcon.prototype.onAdd = function() {\n  this.div_ = document.createElement('DIV');\n  if (this.visible_) {\n    var pos = this.getPosFromLatLng_(this.center_);\n    this.div_.style.cssText = this.createCss(pos);\n    this.div_.innerHTML = this.sums_.text;\n  }\n\n  var panes = this.getPanes();\n  panes.overlayMouseTarget.appendChild(this.div_);\n\n  var that = this;\n  google.maps.event.addDomListener(this.div_, 'click', function() {\n    that.triggerClusterClick();\n  });\n};\n\n\n/**\n * Returns the position to place the div dending on the latlng.\n *\n * @param {google.maps.LatLng} latlng The position in latlng.\n * @return {google.maps.Point} The position in pixels.\n * @private\n */\nClusterIcon.prototype.getPosFromLatLng_ = function(latlng) {\n  var pos = this.getProjection().fromLatLngToDivPixel(latlng);\n\n  if (typeof this.iconAnchor_ === 'object' && this.iconAnchor_.length === 2) {\n    pos.x -= this.iconAnchor_[0];\n    pos.y -= this.iconAnchor_[1];\n  } else {\n    pos.x -= parseInt(this.width_ / 2, 10);\n    pos.y -= parseInt(this.height_ / 2, 10);\n  }\n  return pos;\n};\n\n\n/**\n * Draw the icon.\n * @ignore\n */\nClusterIcon.prototype.draw = function() {\n  if (this.visible_) {\n    var pos = this.getPosFromLatLng_(this.center_);\n    this.div_.style.top = pos.y + 'px';\n    this.div_.style.left = pos.x + 'px';\n  }\n};\n\n\n/**\n * Hide the icon.\n */\nClusterIcon.prototype.hide = function() {\n  if (this.div_) {\n    this.div_.style.display = 'none';\n  }\n  this.visible_ = false;\n};\n\n\n/**\n * Position and show the icon.\n */\nClusterIcon.prototype.show = function() {\n  if (this.div_) {\n    var pos = this.getPosFromLatLng_(this.center_);\n    this.div_.style.cssText = this.createCss(pos);\n    this.div_.style.display = '';\n  }\n  this.visible_ = true;\n};\n\n\n/**\n * Remove the icon from the map\n */\nClusterIcon.prototype.remove = function() {\n  this.setMap(null);\n};\n\n\n/**\n * Implementation of the onRemove interface.\n * @ignore\n */\nClusterIcon.prototype.onRemove = function() {\n  if (this.div_ && this.div_.parentNode) {\n    this.hide();\n    this.div_.parentNode.removeChild(this.div_);\n    this.div_ = null;\n  }\n};\n\n\n/**\n * Set the sums of the icon.\n *\n * @param {Object} sums The sums containing:\n *   'text': (string) The text to display in the icon.\n *   'index': (number) The style index of the icon.\n */\nClusterIcon.prototype.setSums = function(sums) {\n  this.sums_ = sums;\n  this.text_ = sums.text;\n  this.index_ = sums.index;\n  if (this.div_) {\n    this.div_.innerHTML = sums.text;\n  }\n\n  this.useStyle();\n};\n\n\n/**\n * Sets the icon to the the styles.\n */\nClusterIcon.prototype.useStyle = function() {\n  var index = Math.max(0, this.sums_.index - 1);\n  index = Math.min(this.styles_.length - 1, index);\n  var style = this.styles_[index];\n  this.url_ = style['url'];\n  this.height_ = style['height'];\n  this.width_ = style['width'];\n  this.textColor_ = style['textColor'];\n  this.anchor_ = style['anchor'];\n  this.textSize_ = style['textSize'];\n  this.backgroundPosition_ = style['backgroundPosition'];\n  this.iconAnchor_ = style['iconAnchor'];\n};\n\n\n/**\n * Sets the center of the icon.\n *\n * @param {google.maps.LatLng} center The latlng to set as the center.\n */\nClusterIcon.prototype.setCenter = function(center) {\n  this.center_ = center;\n};\n\n\n/**\n * Create the css text based on the position of the icon.\n *\n * @param {google.maps.Point} pos The position.\n * @return {string} The css style text.\n */\nClusterIcon.prototype.createCss = function(pos) {\n  var style = [];\n  style.push('background-image:url(' + this.url_ + ');');\n  var backgroundPosition = this.backgroundPosition_ ? this.backgroundPosition_ : '0 0';\n  style.push('background-position:' + backgroundPosition + ';');\n\n  if (typeof this.anchor_ === 'object') {\n    if (typeof this.anchor_[0] === 'number' && this.anchor_[0] > 0 &&\n        this.anchor_[0] < this.height_) {\n      style.push('height:' + (this.height_ - this.anchor_[0]) +\n          'px; padding-top:' + this.anchor_[0] + 'px;');\n    } else if (typeof this.anchor_[0] === 'number' && this.anchor_[0] < 0 &&\n        -this.anchor_[0] < this.height_) {\n      style.push('height:' + this.height_ + 'px; line-height:' + (this.height_ + this.anchor_[0]) +\n          'px;');\n    } else {\n      style.push('height:' + this.height_ + 'px; line-height:' + this.height_ +\n          'px;');\n    }\n    if (typeof this.anchor_[1] === 'number' && this.anchor_[1] > 0 &&\n        this.anchor_[1] < this.width_) {\n      style.push('width:' + (this.width_ - this.anchor_[1]) +\n          'px; padding-left:' + this.anchor_[1] + 'px;');\n    } else {\n      style.push('width:' + this.width_ + 'px; text-align:center;');\n    }\n  } else {\n    style.push('height:' + this.height_ + 'px; line-height:' +\n        this.height_ + 'px; width:' + this.width_ + 'px; text-align:center;');\n  }\n\n  var txtColor = this.textColor_ ? this.textColor_ : 'black';\n  var txtSize = this.textSize_ ? this.textSize_ : 11;\n\n  style.push('cursor:pointer; top:' + pos.y + 'px; left:' +\n      pos.x + 'px; color:' + txtColor + '; position:absolute; font-size:' +\n      txtSize + 'px; font-family:Arial,sans-serif; font-weight:bold');\n  return style.join('');\n};\n\n\n// Export Symbols for Closure\n// If you are not going to compile with closure then you can remove the\n// code below.\nwindow['MarkerClusterer'] = MarkerClusterer;\nMarkerClusterer.prototype['addMarker'] = MarkerClusterer.prototype.addMarker;\nMarkerClusterer.prototype['addMarkers'] = MarkerClusterer.prototype.addMarkers;\nMarkerClusterer.prototype['clearMarkers'] =\n    MarkerClusterer.prototype.clearMarkers;\nMarkerClusterer.prototype['fitMapToMarkers'] =\n    MarkerClusterer.prototype.fitMapToMarkers;\nMarkerClusterer.prototype['getCalculator'] =\n    MarkerClusterer.prototype.getCalculator;\nMarkerClusterer.prototype['getGridSize'] =\n    MarkerClusterer.prototype.getGridSize;\nMarkerClusterer.prototype['getExtendedBounds'] =\n    MarkerClusterer.prototype.getExtendedBounds;\nMarkerClusterer.prototype['getMap'] = MarkerClusterer.prototype.getMap;\nMarkerClusterer.prototype['getMarkers'] = MarkerClusterer.prototype.getMarkers;\nMarkerClusterer.prototype['getMaxZoom'] = MarkerClusterer.prototype.getMaxZoom;\nMarkerClusterer.prototype['getStyles'] = MarkerClusterer.prototype.getStyles;\nMarkerClusterer.prototype['getTotalClusters'] =\n    MarkerClusterer.prototype.getTotalClusters;\nMarkerClusterer.prototype['getTotalMarkers'] =\n    MarkerClusterer.prototype.getTotalMarkers;\nMarkerClusterer.prototype['redraw'] = MarkerClusterer.prototype.redraw;\nMarkerClusterer.prototype['removeMarker'] =\n    MarkerClusterer.prototype.removeMarker;\nMarkerClusterer.prototype['removeMarkers'] =\n    MarkerClusterer.prototype.removeMarkers;\nMarkerClusterer.prototype['resetViewport'] =\n    MarkerClusterer.prototype.resetViewport;\nMarkerClusterer.prototype['repaint'] =\n    MarkerClusterer.prototype.repaint;\nMarkerClusterer.prototype['setCalculator'] =\n    MarkerClusterer.prototype.setCalculator;\nMarkerClusterer.prototype['setGridSize'] =\n    MarkerClusterer.prototype.setGridSize;\nMarkerClusterer.prototype['setMaxZoom'] =\n    MarkerClusterer.prototype.setMaxZoom;\nMarkerClusterer.prototype['onAdd'] = MarkerClusterer.prototype.onAdd;\nMarkerClusterer.prototype['draw'] = MarkerClusterer.prototype.draw;\n\nCluster.prototype['getCenter'] = Cluster.prototype.getCenter;\nCluster.prototype['getSize'] = Cluster.prototype.getSize;\nCluster.prototype['getMarkers'] = Cluster.prototype.getMarkers;\n\nClusterIcon.prototype['onAdd'] = ClusterIcon.prototype.onAdd;\nClusterIcon.prototype['draw'] = ClusterIcon.prototype.draw;\nClusterIcon.prototype['onRemove'] = ClusterIcon.prototype.onRemove;\n\n\n\n/*** EXPORTS FROM exports-loader ***/\nexports[\"Class\"] = (MarkerClusterer);\nexports[\"google\"] = (google);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 5 */
/*!***********************************************!*\
  !*** ./~/webOptimizer/browserAPI.compiled.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(__dirname) {// #!/usr/bin/env node\n\n// -*- coding: utf-8 -*-\n'use strict';\n/* !\n    region header\n    Copyright Torben Sickert (info[\"~at~\"]torben.website) 16.12.2012\n\n    License\n    -------\n\n    This library written by Torben Sickert stand under a creative commons naming\n    3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de\n    endregion\n*/\n// region imports\n/* eslint-disable no-unused-vars */\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\n// endregion\n// region variables\n\n/* eslint-enable no-unused-vars */\n// endregion\n// region declaration\nconst onCreatedListener = [];\nlet browserAPI;\n// endregion\n// region ensure presence of common browser environment\nif (typeof TARGET === 'undefined' || TARGET === 'node') {\n    // region mock browser environment\n    const fileSystem = __webpack_require__(/*! fs */ 7);\n    const path = __webpack_require__(/*! path */ 10);\n    const metaDOM = __webpack_require__(/*! jsdom */ 9);\n    const virtualConsole = metaDOM.createVirtualConsole().sendTo(console, { omitJsdomErrors: true });\n    virtualConsole.on('jsdomError', error => {\n        if (!browserAPI.debug && ['XMLHttpRequest', 'resource loading'\n        // IgnoreTypeCheck\n        ].includes(error.type)) console.warn(`Loading resource failed: ${ error.toString() }.`);else\n            // IgnoreTypeCheck\n            console.error(error.stack, error.detail);\n    });\n    let templateFilePath = path.join(__dirname, 'test.compiled.html');\n    try {\n        fileSystem.accessSync(templateFilePath, fileSystem.F_OK);\n    } catch (error) {\n        templateFilePath = path.join(process.cwd(), __dirname, 'node_modules/webOptimizer/test.compiled.html');\n    }\n    metaDOM.env({\n        created: (error, window) => {\n            browserAPI = {\n                debug: false, domContentLoaded: false, metaDOM, window };\n            browserAPI.window.document.addEventListener('DOMContentLoaded', () => {\n                browserAPI.domContentLoaded = true;\n            });\n            if (error) throw error;else for (const callback of onCreatedListener) callback(browserAPI, false);\n        },\n        features: {\n            FetchExternalResources: ['script', 'frame', 'iframe', 'link', 'img'],\n            ProcessExternalResources: ['script'],\n            SkipExternalResources: false\n        },\n        html: fileSystem.readFileSync(templateFilePath, { encoding: 'utf-8' }),\n        resourceLoader: (resource, callback) => {\n            if (resource.url.hostname === 'localhost') {\n                resource.url.host = resource.url.hostname = '';\n                resource.url.port = null;\n                resource.url.protocol = 'file:';\n                resource.url.href = resource.url.href.replace(/^[a-zA-Z]+:\\/\\/localhost(?::[0-9]+)?/, `file://${ process.cwd() }`);\n                resource.url.path = resource.url.pathname = path.join(process.cwd(), resource.url.path);\n            }\n            if (browserAPI.debug) console.info(`Load resource \"${ resource.url.href }\".`);\n            return resource.defaultFetch(function (error) {\n                if (!error) callback.apply(this, arguments);\n            });\n        },\n        url: 'http://localhost',\n        virtualConsole\n    });\n    // endregion\n} else {\n        browserAPI = { debug: false, domContentLoaded: false, metaDOM: null, window };\n        window.document.addEventListener('DOMContentLoaded', () => {\n            browserAPI.domContentLoaded = true;\n            for (const callback of onCreatedListener) callback(browserAPI, false);\n        });\n    }\n// endregion\n\nexports.default = (callback, clear = true) => {\n    // region initialize global context\n    /*\n        NOTE: We have to define window globally before anything is loaded to\n        ensure that all future instances share the same window object.\n    */\n    if (clear && typeof global !== 'undefined' && global !== browserAPI.window) {\n        global.window = browserAPI.window;\n        for (const key in browserAPI.window) if (browserAPI.window.hasOwnProperty(key) && !global.hasOwnProperty(key)) global[key] = browserAPI.window[key];\n    }\n    // endregion\n    if (typeof TARGET === 'undefined' || TARGET === 'node') return browserAPI ? callback(browserAPI, true) : onCreatedListener.push(callback);\n    return browserAPI.domContentLoaded ? callback(browserAPI, true) : onCreatedListener.push(callback);\n};\n// region vim modline\n// vim: set tabstop=4 shiftwidth=4 expandtab:\n// vim: foldmethod=marker foldmarker=region,endregion:\n// endregion\n\n//# sourceMappingURL=data:application/json;base64,\n/* WEBPACK VAR INJECTION */}.call(exports, \"/\"))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vd2ViT3B0aW1pemVyL2Jyb3dzZXJBUEkuY29tcGlsZWQuanM/ODljYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAjIS91c3IvYmluL2VudiBub2RlXG5cbi8vIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuJ3VzZSBzdHJpY3QnO1xuLyogIVxuICAgIHJlZ2lvbiBoZWFkZXJcbiAgICBDb3B5cmlnaHQgVG9yYmVuIFNpY2tlcnQgKGluZm9bXCJ+YXR+XCJddG9yYmVuLndlYnNpdGUpIDE2LjEyLjIwMTJcblxuICAgIExpY2Vuc2VcbiAgICAtLS0tLS0tXG5cbiAgICBUaGlzIGxpYnJhcnkgd3JpdHRlbiBieSBUb3JiZW4gU2lja2VydCBzdGFuZCB1bmRlciBhIGNyZWF0aXZlIGNvbW1vbnMgbmFtaW5nXG4gICAgMy4wIHVucG9ydGVkIGxpY2Vuc2UuIHNlZSBodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS8zLjAvZGVlZC5kZVxuICAgIGVuZHJlZ2lvblxuKi9cbi8vIHJlZ2lvbiBpbXBvcnRzXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbi8vIGVuZHJlZ2lvblxuLy8gcmVnaW9uIHZhcmlhYmxlc1xuXG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG4vLyBlbmRyZWdpb25cbi8vIHJlZ2lvbiBkZWNsYXJhdGlvblxuY29uc3Qgb25DcmVhdGVkTGlzdGVuZXIgPSBbXTtcbmxldCBicm93c2VyQVBJO1xuLy8gZW5kcmVnaW9uXG4vLyByZWdpb24gZW5zdXJlIHByZXNlbmNlIG9mIGNvbW1vbiBicm93c2VyIGVudmlyb25tZW50XG5pZiAodHlwZW9mIFRBUkdFVCA9PT0gJ3VuZGVmaW5lZCcgfHwgVEFSR0VUID09PSAnbm9kZScpIHtcbiAgICAvLyByZWdpb24gbW9jayBicm93c2VyIGVudmlyb25tZW50XG4gICAgY29uc3QgZmlsZVN5c3RlbSA9IHJlcXVpcmUoJ2ZzJyk7XG4gICAgY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbiAgICBjb25zdCBtZXRhRE9NID0gcmVxdWlyZSgnanNkb20nKTtcbiAgICBjb25zdCB2aXJ0dWFsQ29uc29sZSA9IG1ldGFET00uY3JlYXRlVmlydHVhbENvbnNvbGUoKS5zZW5kVG8oY29uc29sZSwgeyBvbWl0SnNkb21FcnJvcnM6IHRydWUgfSk7XG4gICAgdmlydHVhbENvbnNvbGUub24oJ2pzZG9tRXJyb3InLCBlcnJvciA9PiB7XG4gICAgICAgIGlmICghYnJvd3NlckFQSS5kZWJ1ZyAmJiBbJ1hNTEh0dHBSZXF1ZXN0JywgJ3Jlc291cmNlIGxvYWRpbmcnXG4gICAgICAgIC8vIElnbm9yZVR5cGVDaGVja1xuICAgICAgICBdLmluY2x1ZGVzKGVycm9yLnR5cGUpKSBjb25zb2xlLndhcm4oYExvYWRpbmcgcmVzb3VyY2UgZmFpbGVkOiAkeyBlcnJvci50b1N0cmluZygpIH0uYCk7ZWxzZVxuICAgICAgICAgICAgLy8gSWdub3JlVHlwZUNoZWNrXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrLCBlcnJvci5kZXRhaWwpO1xuICAgIH0pO1xuICAgIGxldCB0ZW1wbGF0ZUZpbGVQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ3Rlc3QuY29tcGlsZWQuaHRtbCcpO1xuICAgIHRyeSB7XG4gICAgICAgIGZpbGVTeXN0ZW0uYWNjZXNzU3luYyh0ZW1wbGF0ZUZpbGVQYXRoLCBmaWxlU3lzdGVtLkZfT0spO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRlbXBsYXRlRmlsZVBhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgX19kaXJuYW1lLCAnbm9kZV9tb2R1bGVzL3dlYk9wdGltaXplci90ZXN0LmNvbXBpbGVkLmh0bWwnKTtcbiAgICB9XG4gICAgbWV0YURPTS5lbnYoe1xuICAgICAgICBjcmVhdGVkOiAoZXJyb3IsIHdpbmRvdykgPT4ge1xuICAgICAgICAgICAgYnJvd3NlckFQSSA9IHtcbiAgICAgICAgICAgICAgICBkZWJ1ZzogZmFsc2UsIGRvbUNvbnRlbnRMb2FkZWQ6IGZhbHNlLCBtZXRhRE9NLCB3aW5kb3cgfTtcbiAgICAgICAgICAgIGJyb3dzZXJBUEkud2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYnJvd3NlckFQSS5kb21Db250ZW50TG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtlbHNlIGZvciAoY29uc3QgY2FsbGJhY2sgb2Ygb25DcmVhdGVkTGlzdGVuZXIpIGNhbGxiYWNrKGJyb3dzZXJBUEksIGZhbHNlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZmVhdHVyZXM6IHtcbiAgICAgICAgICAgIEZldGNoRXh0ZXJuYWxSZXNvdXJjZXM6IFsnc2NyaXB0JywgJ2ZyYW1lJywgJ2lmcmFtZScsICdsaW5rJywgJ2ltZyddLFxuICAgICAgICAgICAgUHJvY2Vzc0V4dGVybmFsUmVzb3VyY2VzOiBbJ3NjcmlwdCddLFxuICAgICAgICAgICAgU2tpcEV4dGVybmFsUmVzb3VyY2VzOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBodG1sOiBmaWxlU3lzdGVtLnJlYWRGaWxlU3luYyh0ZW1wbGF0ZUZpbGVQYXRoLCB7IGVuY29kaW5nOiAndXRmLTgnIH0pLFxuICAgICAgICByZXNvdXJjZUxvYWRlcjogKHJlc291cmNlLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc291cmNlLnVybC5ob3N0bmFtZSA9PT0gJ2xvY2FsaG9zdCcpIHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZS51cmwuaG9zdCA9IHJlc291cmNlLnVybC5ob3N0bmFtZSA9ICcnO1xuICAgICAgICAgICAgICAgIHJlc291cmNlLnVybC5wb3J0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXNvdXJjZS51cmwucHJvdG9jb2wgPSAnZmlsZTonO1xuICAgICAgICAgICAgICAgIHJlc291cmNlLnVybC5ocmVmID0gcmVzb3VyY2UudXJsLmhyZWYucmVwbGFjZSgvXlthLXpBLVpdKzpcXC9cXC9sb2NhbGhvc3QoPzo6WzAtOV0rKT8vLCBgZmlsZTovLyR7IHByb2Nlc3MuY3dkKCkgfWApO1xuICAgICAgICAgICAgICAgIHJlc291cmNlLnVybC5wYXRoID0gcmVzb3VyY2UudXJsLnBhdGhuYW1lID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIHJlc291cmNlLnVybC5wYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChicm93c2VyQVBJLmRlYnVnKSBjb25zb2xlLmluZm8oYExvYWQgcmVzb3VyY2UgXCIkeyByZXNvdXJjZS51cmwuaHJlZiB9XCIuYCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb3VyY2UuZGVmYXVsdEZldGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdCcsXG4gICAgICAgIHZpcnR1YWxDb25zb2xlXG4gICAgfSk7XG4gICAgLy8gZW5kcmVnaW9uXG59IGVsc2Uge1xuICAgICAgICBicm93c2VyQVBJID0geyBkZWJ1ZzogZmFsc2UsIGRvbUNvbnRlbnRMb2FkZWQ6IGZhbHNlLCBtZXRhRE9NOiBudWxsLCB3aW5kb3cgfTtcbiAgICAgICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBicm93c2VyQVBJLmRvbUNvbnRlbnRMb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiBvbkNyZWF0ZWRMaXN0ZW5lcikgY2FsbGJhY2soYnJvd3NlckFQSSwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG4vLyBlbmRyZWdpb25cblxuZXhwb3J0cy5kZWZhdWx0ID0gKGNhbGxiYWNrLCBjbGVhciA9IHRydWUpID0+IHtcbiAgICAvLyByZWdpb24gaW5pdGlhbGl6ZSBnbG9iYWwgY29udGV4dFxuICAgIC8qXG4gICAgICAgIE5PVEU6IFdlIGhhdmUgdG8gZGVmaW5lIHdpbmRvdyBnbG9iYWxseSBiZWZvcmUgYW55dGhpbmcgaXMgbG9hZGVkIHRvXG4gICAgICAgIGVuc3VyZSB0aGF0IGFsbCBmdXR1cmUgaW5zdGFuY2VzIHNoYXJlIHRoZSBzYW1lIHdpbmRvdyBvYmplY3QuXG4gICAgKi9cbiAgICBpZiAoY2xlYXIgJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsICE9PSBicm93c2VyQVBJLndpbmRvdykge1xuICAgICAgICBnbG9iYWwud2luZG93ID0gYnJvd3NlckFQSS53aW5kb3c7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGJyb3dzZXJBUEkud2luZG93KSBpZiAoYnJvd3NlckFQSS53aW5kb3cuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhZ2xvYmFsLmhhc093blByb3BlcnR5KGtleSkpIGdsb2JhbFtrZXldID0gYnJvd3NlckFQSS53aW5kb3dba2V5XTtcbiAgICB9XG4gICAgLy8gZW5kcmVnaW9uXG4gICAgaWYgKHR5cGVvZiBUQVJHRVQgPT09ICd1bmRlZmluZWQnIHx8IFRBUkdFVCA9PT0gJ25vZGUnKSByZXR1cm4gYnJvd3NlckFQSSA/IGNhbGxiYWNrKGJyb3dzZXJBUEksIHRydWUpIDogb25DcmVhdGVkTGlzdGVuZXIucHVzaChjYWxsYmFjayk7XG4gICAgcmV0dXJuIGJyb3dzZXJBUEkuZG9tQ29udGVudExvYWRlZCA/IGNhbGxiYWNrKGJyb3dzZXJBUEksIHRydWUpIDogb25DcmVhdGVkTGlzdGVuZXIucHVzaChjYWxsYmFjayk7XG59O1xuLy8gcmVnaW9uIHZpbSBtb2RsaW5lXG4vLyB2aW06IHNldCB0YWJzdG9wPTQgc2hpZnR3aWR0aD00IGV4cGFuZHRhYjpcbi8vIHZpbTogZm9sZG1ldGhvZD1tYXJrZXIgZm9sZG1hcmtlcj1yZWdpb24sZW5kcmVnaW9uOlxuLy8gZW5kcmVnaW9uXG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUp5YjNkelpYSkJVRWt1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96czdPenM3T3pzN096dEJRVmRCTzBGQlEwRTdPenM3T3p0QlFVOUJPMEZCUTBFN08wRkJUa0U3UVVGRFF6dEJRVU5FTzBGQlMwRXNUVUZCVFN4dlFrRkJiME1zUlVGQk1VTTdRVUZEUVN4SlFVRkpMRlZCUVVvN1FVRkRRVHRCUVVOQk8wRkJRMEVzU1VGQlNTeFBRVUZQTEUxQlFWQXNTMEZCYTBJc1YwRkJiRUlzU1VGQmFVTXNWMEZCVnl4TlFVRm9SQ3hGUVVGM1JEdEJRVU53UkR0QlFVTkJMRlZCUVUwc1lVRkJiMElzVVVGQlVTeEpRVUZTTEVOQlFURkNPMEZCUTBFc1ZVRkJUU3hQUVVGakxGRkJRVkVzVFVGQlVpeERRVUZ3UWp0QlFVTkJMRlZCUVUwc1ZVRkJhVUlzVVVGQlVTeFBRVUZTTEVOQlFYWkNPMEZCUTBFc1ZVRkJUU3hwUWtGQmQwSXNVVUZCVVN4dlFrRkJVaXhIUVVFclFpeE5RVUV2UWl4RFFVTXhRaXhQUVVRd1FpeEZRVU5xUWl4RlFVRkRMR2xDUVVGcFFpeEpRVUZzUWl4RlFVUnBRaXhEUVVFNVFqdEJRVVZCTEcxQ1FVRmxMRVZCUVdZc1EwRkJhMElzV1VGQmJFSXNSVUZCYVVNc1MwRkJSQ3hKUVVGelFqdEJRVU5zUkN4WlFVRkpMRU5CUVVNc1YwRkJWeXhMUVVGYUxFbEJRWEZDTEVOQlEzSkNMR2RDUVVSeFFpeEZRVU5JTzBGQlEzUkNPMEZCUm5sQ0xGVkJSM1pDTEZGQlNIVkNMRU5CUjJRc1RVRkJUU3hKUVVoUkxFTkJRWHBDTEVWQlNVa3NVVUZCVVN4SlFVRlNMRU5CUVdNc05rSkJRVEpDTEUxQlFVMHNVVUZCVGl4RlFVRnBRaXhKUVVFeFJDeEZRVXBLTzBGQlRVazdRVUZEUVN4dlFrRkJVU3hMUVVGU0xFTkJRV01zVFVGQlRTeExRVUZ3UWl4RlFVRXlRaXhOUVVGTkxFMUJRV3BETzBGQlExQXNTMEZVUkR0QlFWVkJMRkZCUVVrc2JVSkJRVEJDTEV0QlFVc3NTVUZCVEN4RFFVRlZMRk5CUVZZc1JVRkJjVUlzYjBKQlFYSkNMRU5CUVRsQ08wRkJRMEVzVVVGQlNUdEJRVU5CTEcxQ1FVRlhMRlZCUVZnc1EwRkJjMElzWjBKQlFYUkNMRVZCUVhkRExGZEJRVmNzU1VGQmJrUTdRVUZEU0N4TFFVWkVMRU5CUlVVc1QwRkJUeXhMUVVGUUxFVkJRV003UVVGRFdpd3lRa0ZCYlVJc1MwRkJTeXhKUVVGTUxFTkJRMllzVVVGQlVTeEhRVUZTTEVWQlJHVXNSVUZEUVN4VFFVUkJMRVZCUldZc09FTkJSbVVzUTBGQmJrSTdRVUZIU0R0QlFVTkVMRmxCUVZFc1IwRkJVaXhEUVVGWk8wRkJRMUlzYVVKQlFWTXNRMEZCUXl4TFFVRkVMRVZCUVdVc1RVRkJaaXhMUVVGelF6dEJRVU16UXl4NVFrRkJZVHRCUVVOVUxIVkNRVUZQTEV0QlJFVXNSVUZEU3l4clFrRkJhMElzUzBGRWRrSXNSVUZET0VJc1QwRkVPVUlzUlVGRGRVTXNUVUZFZGtNc1JVRkJZanRCUVVWQkxIVkNRVUZYTEUxQlFWZ3NRMEZCYTBJc1VVRkJiRUlzUTBGQk1rSXNaMEpCUVROQ0xFTkJRVFJETEd0Q1FVRTFReXhGUVVGblJTeE5RVU4wUkR0QlFVTk9MREpDUVVGWExHZENRVUZZTEVkQlFUaENMRWxCUVRsQ08wRkJRMGdzWVVGSVJEdEJRVWxCTEdkQ1FVRkpMRXRCUVVvc1JVRkRTU3hOUVVGTkxFdEJRVTRzUTBGRVNpeExRVWRKTEV0QlFVc3NUVUZCVFN4UlFVRllMRWxCUVdkRExHbENRVUZvUXl4RlFVTkpMRk5CUVZNc1ZVRkJWQ3hGUVVGeFFpeExRVUZ5UWp0QlFVTllMRk5CWWs4N1FVRmpVaXhyUWtGQlZUdEJRVU5PTEc5RFFVRjNRaXhEUVVOd1FpeFJRVVJ2UWl4RlFVTldMRTlCUkZVc1JVRkRSQ3hSUVVSRExFVkJRMU1zVFVGRVZDeEZRVU5wUWl4TFFVUnFRaXhEUVVSc1FqdEJRVWxPTEhORFFVRXdRaXhEUVVGRExGRkJRVVFzUTBGS2NFSTdRVUZMVGl4dFEwRkJkVUk3UVVGTWFrSXNVMEZrUmp0QlFYRkNVaXhqUVVGTkxGZEJRVmNzV1VGQldDeERRVUYzUWl4blFrRkJlRUlzUlVGQk1FTXNSVUZCUXl4VlFVRlZMRTlCUVZnc1JVRkJNVU1zUTBGeVFrVTdRVUZ6UWxJc2QwSkJRV2RDTEVOQlExb3NVVUZFV1N4RlFXbENWQ3hSUVdwQ1V5eExRV3RDVGp0QlFVTk9MR2RDUVVGSkxGTkJRVk1zUjBGQlZDeERRVUZoTEZGQlFXSXNTMEZCTUVJc1YwRkJPVUlzUlVGQk1rTTdRVUZEZGtNc2VVSkJRVk1zUjBGQlZDeERRVUZoTEVsQlFXSXNSMEZCYjBJc1UwRkJVeXhIUVVGVUxFTkJRV0VzVVVGQllpeEhRVUYzUWl4RlFVRTFRenRCUVVOQkxIbENRVUZUTEVkQlFWUXNRMEZCWVN4SlFVRmlMRWRCUVc5Q0xFbEJRWEJDTzBGQlEwRXNlVUpCUVZNc1IwRkJWQ3hEUVVGaExGRkJRV0lzUjBGQmQwSXNUMEZCZUVJN1FVRkRRU3g1UWtGQlV5eEhRVUZVTEVOQlFXRXNTVUZCWWl4SFFVRnZRaXhUUVVGVExFZEJRVlFzUTBGQllTeEpRVUZpTEVOQlFXdENMRTlCUVd4Q0xFTkJRMmhDTEhORFFVUm5RaXhGUVVWbUxGZEJRVk1zVVVGQlVTeEhRVUZTTEVWQlFXTXNSMEZHVWl4RFFVRndRanRCUVVkQkxIbENRVUZUTEVkQlFWUXNRMEZCWVN4SlFVRmlMRWRCUVc5Q0xGTkJRVk1zUjBGQlZDeERRVUZoTEZGQlFXSXNSMEZCZDBJc1MwRkJTeXhKUVVGTUxFTkJRM2hETEZGQlFWRXNSMEZCVWl4RlFVUjNReXhGUVVONlFpeFRRVUZUTEVkQlFWUXNRMEZCWVN4SlFVUlpMRU5CUVRWRE8wRkJSVWc3UVVGRFJDeG5Ra0ZCU1N4WFFVRlhMRXRCUVdZc1JVRkRTU3hSUVVGUkxFbEJRVklzUTBGQll5eHRRa0ZCYVVJc1UwRkJVeXhIUVVGVUxFTkJRV0VzU1VGQlN5eExRVUZxUkR0QlFVTktMRzFDUVVGUExGTkJRVk1zV1VGQlZDeERRVUZ6UWl4VlFVRlRMRXRCUVZRc1JVRkJORUk3UVVGRGNrUXNiMEpCUVVrc1EwRkJReXhMUVVGTUxFVkJRMGtzVTBGQlV5eExRVUZVTEVOQlFXVXNTVUZCWml4RlFVRnhRaXhUUVVGeVFqdEJRVU5RTEdGQlNFMHNRMEZCVUR0QlFVbElMRk5CZWtSUE8wRkJNRVJTTEdGQlFVc3NhMEpCTVVSSE8wRkJNa1JTTzBGQk0wUlJMRXRCUVZvN1FVRTJSRUU3UVVGRFNDeERRWFpHUkN4TlFYVkdUenRCUVVOSUxIRkNRVUZoTEVWQlFVTXNUMEZCVHl4TFFVRlNMRVZCUVdVc2EwSkJRV3RDTEV0QlFXcERMRVZCUVhkRExGTkJRVk1zU1VGQmFrUXNSVUZCZFVRc1RVRkJka1FzUlVGQllqdEJRVU5CTEdWQlFVOHNVVUZCVUN4RFFVRm5RaXhuUWtGQmFFSXNRMEZCYVVNc2EwSkJRV3BETEVWQlFYRkVMRTFCUVZjN1FVRkROVVFzZFVKQlFWY3NaMEpCUVZnc1IwRkJPRUlzU1VGQk9VSTdRVUZEUVN4cFFrRkJTeXhOUVVGTkxGRkJRVmdzU1VGQlowTXNhVUpCUVdoRExFVkJRMGtzVTBGQlV5eFZRVUZVTEVWQlFYRkNMRXRCUVhKQ08wRkJRMUFzVTBGS1JEdEJRVXRJTzBGQlEwUTdPMnRDUVVObExFTkJRVU1zVVVGQlJDeEZRVUZ2UWl4UlFVRm5RaXhKUVVGd1F5eExRVUZwUkR0QlFVTTFSRHRCUVVOQk96czdPMEZCU1VFc1VVRkRTU3hUUVVGVExFOUJRVThzVFVGQlVDeExRVUZyUWl4WFFVRXpRaXhKUVVFd1F5eFhRVUZYTEZkQlFWY3NUVUZFY0VVc1JVRkZSVHRCUVVORkxHVkJRVThzVFVGQlVDeEhRVUZuUWl4WFFVRlhMRTFCUVROQ08wRkJRMEVzWVVGQlN5eE5RVUZOTEVkQlFWZ3NTVUZCYTBJc1YwRkJWeXhOUVVFM1FpeEZRVU5KTEVsQlFVa3NWMEZCVnl4TlFVRllMRU5CUVd0Q0xHTkJRV3hDTEVOQlEwRXNSMEZFUVN4TFFVVkRMRU5CUVVNc1QwRkJUeXhqUVVGUUxFTkJRWE5DTEVkQlFYUkNMRU5CUms0c1JVRkhTU3hQUVVGUExFZEJRVkFzU1VGQll5eFhRVUZYTEUxQlFWZ3NRMEZCYTBJc1IwRkJiRUlzUTBGQlpEdEJRVU5ZTzBGQlEwUTdRVUZEUVN4UlFVRkpMRTlCUVU4c1RVRkJVQ3hMUVVGclFpeFhRVUZzUWl4SlFVRnBReXhYUVVGWExFMUJRV2hFTEVWQlEwa3NUMEZCVVN4VlFVRkVMRWRCUVdVc1UwRkRiRUlzVlVGRWEwSXNSVUZEVGl4SlFVUk5MRU5CUVdZc1IwRkZTQ3hyUWtGQmEwSXNTVUZCYkVJc1EwRkJkVUlzVVVGQmRrSXNRMEZHU2p0QlFVZEtMRmRCUVZFc1YwRkJWeXhuUWtGQldpeEhRVUZuUXl4VFFVTnVReXhWUVVSdFF5eEZRVU4yUWl4SlFVUjFRaXhEUVVGb1F5eEhRVVZJTEd0Q1FVRnJRaXhKUVVGc1FpeERRVUYxUWl4UlFVRjJRaXhEUVVaS08wRkJSMGdzUXp0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltSnliM2R6WlhKQlVFa3VZMjl0Y0dsc1pXUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QWpJUzkxYzNJdlltbHVMMlZ1ZGlCdWIyUmxYRzR2THlCQVpteHZkMXh1THk4Z0xTb3RJR052WkdsdVp6b2dkWFJtTFRnZ0xTb3RYRzRuZFhObElITjBjbWxqZENkY2JpOHFJQ0ZjYmlBZ0lDQnlaV2RwYjI0Z2FHVmhaR1Z5WEc0Z0lDQWdRMjl3ZVhKcFoyaDBJRlJ2Y21KbGJpQlRhV05yWlhKMElDaHBibVp2VzF3aWZtRjBmbHdpWFhSdmNtSmxiaTUzWldKemFYUmxLU0F4Tmk0eE1pNHlNREV5WEc1Y2JpQWdJQ0JNYVdObGJuTmxYRzRnSUNBZ0xTMHRMUzB0TFZ4dVhHNGdJQ0FnVkdocGN5QnNhV0p5WVhKNUlIZHlhWFIwWlc0Z1lua2dWRzl5WW1WdUlGTnBZMnRsY25RZ2MzUmhibVFnZFc1a1pYSWdZU0JqY21WaGRHbDJaU0JqYjIxdGIyNXpJRzVoYldsdVoxeHVJQ0FnSURNdU1DQjFibkJ2Y25SbFpDQnNhV05sYm5ObExpQnpaV1VnYUhSMGNEb3ZMMk55WldGMGFYWmxZMjl0Ylc5dWN5NXZjbWN2YkdsalpXNXpaWE12WW5rdk15NHdMMlJsWldRdVpHVmNiaUFnSUNCbGJtUnlaV2RwYjI1Y2Jpb3ZYRzR2THlCeVpXZHBiMjRnYVcxd2IzSjBjMXh1THlvZ1pYTnNhVzUwTFdScGMyRmliR1VnYm04dGRXNTFjMlZrTFhaaGNuTWdLaTljYm1sdGNHOXlkQ0IwZVhCbElIdENjbTkzYzJWeVFWQkpMQ0JFYjIxT2IyUmxMQ0JYYVc1a2IzZDlJR1p5YjIwZ0p5NHZkSGx3WlNkY2JpOHFJR1Z6YkdsdWRDMWxibUZpYkdVZ2JtOHRkVzUxYzJWa0xYWmhjbk1nS2k5Y2JpQXZMeUJsYm1SeVpXZHBiMjVjYmk4dklISmxaMmx2YmlCa1pXTnNZWEpoZEdsdmJseHVaR1ZqYkdGeVpTQjJZWElnVkVGU1IwVlVPbk4wY21sdVoxeHVaR1ZqYkdGeVpTQjJZWElnZDJsdVpHOTNPbGRwYm1SdmQxeHVMeThnWlc1a2NtVm5hVzl1WEc0dkx5QnlaV2RwYjI0Z2RtRnlhV0ZpYkdWelhHNWpiMjV6ZENCdmJrTnlaV0YwWldSTWFYTjBaVzVsY2pwQmNuSmhlVHhHZFc1amRHbHZiajRnUFNCYlhWeHViR1YwSUdKeWIzZHpaWEpCVUVrNlFuSnZkM05sY2tGUVNWeHVMeThnWlc1a2NtVm5hVzl1WEc0dkx5QnlaV2RwYjI0Z1pXNXpkWEpsSUhCeVpYTmxibU5sSUc5bUlHTnZiVzF2YmlCaWNtOTNjMlZ5SUdWdWRtbHliMjV0Wlc1MFhHNXBaaUFvZEhsd1pXOW1JRlJCVWtkRlZDQTlQVDBnSjNWdVpHVm1hVzVsWkNjZ2ZId2dWRUZTUjBWVUlEMDlQU0FuYm05a1pTY3BJSHRjYmlBZ0lDQXZMeUJ5WldkcGIyNGdiVzlqYXlCaWNtOTNjMlZ5SUdWdWRtbHliMjV0Wlc1MFhHNGdJQ0FnWTI5dWMzUWdabWxzWlZONWMzUmxiVHBQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2RtY3ljcFhHNGdJQ0FnWTI5dWMzUWdjR0YwYURwUFltcGxZM1FnUFNCeVpYRjFhWEpsS0Nkd1lYUm9KeWxjYmlBZ0lDQmpiMjV6ZENCdFpYUmhSRTlOT2s5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSjJwelpHOXRKeWxjYmlBZ0lDQmpiMjV6ZENCMmFYSjBkV0ZzUTI5dWMyOXNaVHBQWW1wbFkzUWdQU0J0WlhSaFJFOU5MbU55WldGMFpWWnBjblIxWVd4RGIyNXpiMnhsS0NrdWMyVnVaRlJ2S0Z4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTENCN2IyMXBkRXB6Wkc5dFJYSnliM0p6T2lCMGNuVmxmU2xjYmlBZ0lDQjJhWEowZFdGc1EyOXVjMjlzWlM1dmJpZ25hbk5rYjIxRmNuSnZjaWNzSUNobGNuSnZjanBGY25KdmNpazZkbTlwWkNBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaFluSnZkM05sY2tGUVNTNWtaV0oxWnlBbUppQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBbldFMU1TSFIwY0ZKbGNYVmxjM1FuTENBbmNtVnpiM1Z5WTJVZ2JHOWhaR2x1WnlkY2JpQWdJQ0FnSUNBZ0x5OGdTV2R1YjNKbFZIbHdaVU5vWldOclhHNGdJQ0FnSUNBZ0lGMHVhVzVqYkhWa1pYTW9aWEp5YjNJdWRIbHdaU2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWUV4dllXUnBibWNnY21WemIzVnlZMlVnWm1GcGJHVmtPaUFrZTJWeWNtOXlMblJ2VTNSeWFXNW5LQ2w5TG1BcFhHNGdJQ0FnSUNBZ0lHVnNjMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxuYm05eVpWUjVjR1ZEYUdWamExeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGxjbkp2Y2k1emRHRmpheXdnWlhKeWIzSXVaR1YwWVdsc0tWeHVJQ0FnSUgwcFhHNGdJQ0FnYkdWMElIUmxiWEJzWVhSbFJtbHNaVkJoZEdnNmMzUnlhVzVuSUQwZ2NHRjBhQzVxYjJsdUtGOWZaR2x5Ym1GdFpTd2dKM1JsYzNRdVkyOXRjR2xzWldRdWFIUnRiQ2NwWEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1ptbHNaVk41YzNSbGJTNWhZMk5sYzNOVGVXNWpLSFJsYlhCc1lYUmxSbWxzWlZCaGRHZ3NJR1pwYkdWVGVYTjBaVzB1Umw5UFN5bGNiaUFnSUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNCMFpXMXdiR0YwWlVacGJHVlFZWFJvSUQwZ2NHRjBhQzVxYjJsdUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdlkyVnpjeTVqZDJRb0tTd2dYMTlrYVhKdVlXMWxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oyNXZaR1ZmYlc5a2RXeGxjeTkzWldKUGNIUnBiV2w2WlhJdmRHVnpkQzVqYjIxd2FXeGxaQzVvZEcxc0p5bGNiaUFnSUNCOVhHNGdJQ0FnYldWMFlVUlBUUzVsYm5Zb2UxeHVJQ0FnSUNBZ0lDQmpjbVZoZEdWa09pQW9aWEp5YjNJNlAwVnljbTl5TENCM2FXNWtiM2M2VDJKcVpXTjBLVHAyYjJsa0lEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnliM2R6WlhKQlVFa2dQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWaWRXYzZJR1poYkhObExDQmtiMjFEYjI1MFpXNTBURzloWkdWa09pQm1ZV3h6WlN3Z2JXVjBZVVJQVFN3Z2QybHVaRzkzZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbkp2ZDNObGNrRlFTUzUzYVc1a2IzY3VaRzlqZFcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25SRTlOUTI5dWRHVnVkRXh2WVdSbFpDY3NJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDazZkbTlwWkNBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkp2ZDNObGNrRlFTUzVrYjIxRGIyNTBaVzUwVEc5aFpHVmtJRDBnZEhKMVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGNuSnZjaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5Qmxjbkp2Y2x4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9ZMjl1YzNRZ1kyRnNiR0poWTJzNlJuVnVZM1JwYjI0Z2IyWWdiMjVEY21WaGRHVmtUR2x6ZEdWdVpYSXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGJHeGlZV05yS0dKeWIzZHpaWEpCVUVrc0lHWmhiSE5sS1Z4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQm1aV0YwZFhKbGN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1JtVjBZMmhGZUhSbGNtNWhiRkpsYzI5MWNtTmxjem9nVzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkelkzSnBjSFFuTENBblpuSmhiV1VuTENBbmFXWnlZVzFsSnl3Z0oyeHBibXNuTENBbmFXMW5KMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hTeGNiaUFnSUNBZ0lDQWdJQ0FnSUZCeWIyTmxjM05GZUhSbGNtNWhiRkpsYzI5MWNtTmxjem9nV3lkelkzSnBjSFFuWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRk5yYVhCRmVIUmxjbTVoYkZKbGMyOTFjbU5sY3pvZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2FIUnRiRG9nWm1sc1pWTjVjM1JsYlM1eVpXRmtSbWxzWlZONWJtTW9kR1Z0Y0d4aGRHVkdhV3hsVUdGMGFDd2dlMlZ1WTI5a2FXNW5PaUFuZFhSbUxUZ25mU2tzWEc0Z0lDQWdJQ0FnSUhKbGMyOTFjbU5sVEc5aFpHVnlPaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE52ZFhKalpUcDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3hsYldWdWREcEViMjFPYjJSbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnliRHA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaHZjM1J1WVcxbE9uTjBjbWx1Wnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhRzl6ZERwemRISnBibWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjblE2UDNOMGNtbHVaenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZkRzlqYjJ3NmMzUnlhVzVuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9jbVZtT25OMGNtbHVaenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhRHB6ZEhKcGJtYzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGRHaHVZVzFsT25OMGNtbHVaenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmIydHBaVHB6ZEhKcGJtYzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbUZ6WlZWeWJEcHpkSEpwYm1jN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZEVabGRHTm9PaWhqWVd4c1ltRmphem9vWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5T2o5RmNuSnZjaXdnWW05a2VUcHpkSEpwYm1kY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcElEMCtJSFp2YVdRcElEMCtJSFp2YVdSY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSUdOaGJHeGlZV05yT2lobGNuSnZjam8vUlhKeWIzSXNJR0p2WkhrNmMzUnlhVzVuS1NBOVBpQjJiMmxrWEc0Z0lDQWdJQ0FnSUNrNmRtOXBaQ0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVnpiM1Z5WTJVdWRYSnNMbWh2YzNSdVlXMWxJRDA5UFNBbmJHOWpZV3hvYjNOMEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5MWNtTmxMblZ5YkM1b2IzTjBJRDBnY21WemIzVnlZMlV1ZFhKc0xtaHZjM1J1WVcxbElEMGdKeWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmRYSmpaUzUxY213dWNHOXlkQ0E5SUc1MWJHeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52ZFhKalpTNTFjbXd1Y0hKdmRHOWpiMndnUFNBblptbHNaVG9uWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIzVnlZMlV1ZFhKc0xtaHlaV1lnUFNCeVpYTnZkWEpqWlM1MWNtd3VhSEpsWmk1eVpYQnNZV05sS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZYbHRoTFhwQkxWcGRLenBjWEM5Y1hDOXNiMk5oYkdodmMzUW9Qem82V3pBdE9WMHJLVDh2TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmdabWxzWlRvdkx5UjdjSEp2WTJWemN5NWpkMlFvS1gxZ0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjkxY21ObExuVnliQzV3WVhSb0lEMGdjbVZ6YjNWeVkyVXVkWEpzTG5CaGRHaHVZVzFsSUQwZ2NHRjBhQzVxYjJsdUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205alpYTnpMbU4zWkNncExDQnlaWE52ZFhKalpTNTFjbXd1Y0dGMGFDbGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaWNtOTNjMlZ5UVZCSkxtUmxZblZuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5aGdURzloWkNCeVpYTnZkWEpqWlNCY0lpUjdjbVZ6YjNWeVkyVXVkWEpzTG1oeVpXWjlYQ0l1WUNsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE52ZFhKalpTNWtaV1poZFd4MFJtVjBZMmdvWm5WdVkzUnBiMjRvWlhKeWIzSTZQMFZ5Y205eUtUcDJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV1Z5Y205eUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1ltRmpheTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjFjbXc2SUNkb2RIUndPaTh2Ykc5allXeG9iM04wSnl4Y2JpQWdJQ0FnSUNBZ2RtbHlkSFZoYkVOdmJuTnZiR1ZjYmlBZ0lDQjlLVnh1SUNBZ0lDOHZJR1Z1WkhKbFoybHZibHh1ZlNCbGJITmxJSHRjYmlBZ0lDQmljbTkzYzJWeVFWQkpJRDBnZTJSbFluVm5PaUJtWVd4elpTd2daRzl0UTI5dWRHVnVkRXh2WVdSbFpEb2dabUZzYzJVc0lHMWxkR0ZFVDAwNklHNTFiR3dzSUhkcGJtUnZkMzFjYmlBZ0lDQjNhVzVrYjNjdVpHOWpkVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblJFOU5RMjl1ZEdWdWRFeHZZV1JsWkNjc0lDZ3BPblp2YVdRZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JpY205M2MyVnlRVkJKTG1SdmJVTnZiblJsYm5STWIyRmtaV1FnUFNCMGNuVmxYRzRnSUNBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnWTJGc2JHSmhZMnM2Um5WdVkzUnBiMjRnYjJZZ2IyNURjbVZoZEdWa1RHbHpkR1Z1WlhJcFhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1ltRmpheWhpY205M2MyVnlRVkJKTENCbVlXeHpaU2xjYmlBZ0lDQjlLVnh1ZlZ4dUx5OGdaVzVrY21WbmFXOXVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQW9ZMkZzYkdKaFkyczZSblZ1WTNScGIyNHNJR05zWldGeU9tSnZiMnhsWVc0Z1BTQjBjblZsS1RwaGJua2dQVDRnZTF4dUlDQWdJQzh2SUhKbFoybHZiaUJwYm1sMGFXRnNhWHBsSUdkc2IySmhiQ0JqYjI1MFpYaDBYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQWdUazlVUlRvZ1YyVWdhR0YyWlNCMGJ5QmtaV1pwYm1VZ2QybHVaRzkzSUdkc2IySmhiR3g1SUdKbFptOXlaU0JoYm5sMGFHbHVaeUJwY3lCc2IyRmtaV1FnZEc5Y2JpQWdJQ0FnSUNBZ1pXNXpkWEpsSUhSb1lYUWdZV3hzSUdaMWRIVnlaU0JwYm5OMFlXNWpaWE1nYzJoaGNtVWdkR2hsSUhOaGJXVWdkMmx1Wkc5M0lHOWlhbVZqZEM1Y2JpQWdJQ0FxTDF4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ1kyeGxZWElnSmlZZ2RIbHdaVzltSUdkc2IySmhiQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnWjJ4dlltRnNJQ0U5UFNCaWNtOTNjMlZ5UVZCSkxuZHBibVJ2ZDF4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCbmJHOWlZV3d1ZDJsdVpHOTNJRDBnWW5KdmQzTmxja0ZRU1M1M2FXNWtiM2RjYmlBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCclpYa2dhVzRnWW5KdmQzTmxja0ZRU1M1M2FXNWtiM2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWW5KdmQzTmxja0ZRU1M1M2FXNWtiM2N1YUdGelQzZHVVSEp2Y0dWeWRIa29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhMlY1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBJQ1ltSUNGbmJHOWlZV3d1YUdGelQzZHVVSEp2Y0dWeWRIa29hMlY1S1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmJHOWlZV3hiYTJWNVhTQTlJR0p5YjNkelpYSkJVRWt1ZDJsdVpHOTNXMnRsZVYxY2JpQWdJQ0I5WEc0Z0lDQWdMeThnWlc1a2NtVm5hVzl1WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJVUVZKSFJWUWdQVDA5SUNkMWJtUmxabWx1WldRbklIeDhJRlJCVWtkRlZDQTlQVDBnSjI1dlpHVW5LVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLR0p5YjNkelpYSkJVRWtwSUQ4Z1kyRnNiR0poWTJzb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpY205M2MyVnlRVkJKTENCMGNuVmxYRzRnSUNBZ0lDQWdJQ2tnT2lCdmJrTnlaV0YwWldSTWFYTjBaVzVsY2k1d2RYTm9LR05oYkd4aVlXTnJLVnh1SUNBZ0lISmxkSFZ5YmlBb1luSnZkM05sY2tGUVNTNWtiMjFEYjI1MFpXNTBURzloWkdWa0tTQS9JR05oYkd4aVlXTnJLRnh1SUNBZ0lDQWdJQ0JpY205M2MyVnlRVkJKTENCMGNuVmxYRzRnSUNBZ0tTQTZJRzl1UTNKbFlYUmxaRXhwYzNSbGJtVnlMbkIxYzJnb1kyRnNiR0poWTJzcFhHNTlYRzR2THlCeVpXZHBiMjRnZG1sdElHMXZaR3hwYm1WY2JpOHZJSFpwYlRvZ2MyVjBJSFJoWW5OMGIzQTlOQ0J6YUdsbWRIZHBaSFJvUFRRZ1pYaHdZVzVrZEdGaU9seHVMeThnZG1sdE9pQm1iMnhrYldWMGFHOWtQVzFoY210bGNpQm1iMnhrYldGeWEyVnlQWEpsWjJsdmJpeGxibVJ5WldkcGIyNDZYRzR2THlCbGJtUnlaV2RwYjI1Y2JpSmRmUT09XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vd2ViT3B0aW1pemVyL2Jyb3dzZXJBUEkuY29tcGlsZWQuanNcbiAqKiBtb2R1bGUgaWQgPSA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 6 */
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/***/ function(module, exports) {

	eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/YzNjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4gKiogbW9kdWxlIGlkID0gNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 7 */
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ function(module, exports) {

	eval("module.exports = require(\"fs\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImZzXCI/MmUwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJmc1wiKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwiZnNcIlxuICoqIG1vZHVsZSBpZCA9IDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 8 */
/*!*******************************!*\
  !*** external "jQuery-tools" ***!
  \*******************************/
/***/ function(module, exports) {

	eval("module.exports = require(\"jQuery-tools\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImpRdWVyeS10b29sc1wiPzRiYTQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwialF1ZXJ5LXRvb2xzXCIpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogZXh0ZXJuYWwgXCJqUXVlcnktdG9vbHNcIlxuICoqIG1vZHVsZSBpZCA9IDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 9 */
/*!************************!*\
  !*** external "jsdom" ***!
  \************************/
/***/ function(module, exports) {

	eval("module.exports = require(\"jsdom\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImpzZG9tXCI/NDg3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJqc2RvbVwiKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwianNkb21cIlxuICoqIG1vZHVsZSBpZCA9IDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 10 */
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ function(module, exports) {

	eval("module.exports = require(\"path\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJwYXRoXCI/NWIyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogZXh0ZXJuYWwgXCJwYXRoXCJcbiAqKiBtb2R1bGUgaWQgPSAxMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 11 */
/*!****************************!*\
  !*** external "qunit-cli" ***!
  \****************************/
/***/ function(module, exports) {

	eval("module.exports = require(\"qunit-cli\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJxdW5pdC1jbGlcIj82MTU0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInF1bml0LWNsaVwiKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwicXVuaXQtY2xpXCJcbiAqKiBtb2R1bGUgaWQgPSAxMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }
/******/ ]);