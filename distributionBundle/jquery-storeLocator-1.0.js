// Generated by CoffeeScript 1.7.1

/*
[Project page](https://thaibault.github.com/jQuery-storeLocator)

This plugin provides a google api based store locator.

Copyright Torben Sickert 16.12.2012

License
-------

This library written by Torben Sickert stand under a creative commons naming
3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de

Extending this module
---------------------

For conventions see require on https://github.com/thaibault/require

Author
------

t.sickert@gmail.com (Torben Sickert)

Version
-------

1.0 stable
 */

(function() {
  var main,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  main = function($) {
    var StoreLocator;
    StoreLocator = (function(_super) {
      __extends(StoreLocator, _super);

      function StoreLocator() {
        return StoreLocator.__super__.constructor.apply(this, arguments);
      }


      /*
          A jQuery storelocator plugin.
      
          Expected store data format:
      
          {latitude: NUMBER, longitude: NUMBER, markerIconFileName: STRING}
       */

      StoreLocator.prototype.__name__ = 'StoreLocator';

      StoreLocator.prototype.initialize = function(options) {
        if (options == null) {
          options = {};
        }

        /*Entry point for object orientated jQuery plugin. */
        this.currentlyOpenWindow = null;
        this._options = {
          stores: {
            southWest: {
              latitude: 47.44295,
              longitude: 5.906982
            },
            northEast: {
              latitude: 53.969012,
              longitude: 14.344482
            },
            number: 100
          },
          infoBox: null,
          iconPath: '/webAsset/image/storeLocator/',
          defaultMarkerIconFileName: 'defaultMarkerIcon.png',
          startLocation: null,
          ip: null,
          ipToLocationAPIURL: '{1}://freegeoip.net/json/{2}',
          map: {
            zoom: 11
          },
          onLoaded: $.noop,
          showInputAfterLoadedDelayInMilliseconds: 4000,
          inputFadeInOption: {
            duration: 'fast'
          }
        };
        StoreLocator.__super__.initialize.call(this, options);
        this.$domNodes = this.grabDomNode(this._options.domNode);
        if (this._options.startLocation != null) {
          this.initializeMap();
        } else {
          $.ajax({
            url: this.stringFormat(this._options.ipToLocationAPIURL, document.location.protocol.substring(0, document.location.protocol.length - 1), this._options.ip || ''),
            jsonp: 'callback',
            dataType: 'jsonp',
            success: (function(_this) {
              return function(currentLocation) {
                _this._options.startLocation = currentLocation;
                return _this.initializeMap();
              };
            })(this)
          });
        }
        return this.$domNode || this;
      };

      StoreLocator.prototype.initializeMap = function() {

        /*Initializes cluster, info windows and marker. */
        var index, markerCluster, northEast, searchBox, searchInputDomNode, southWest, store, _i, _j, _len, _ref;
        this._options.map.center = new window.google.maps.LatLng(this._options.startLocation.latitude, this._options.startLocation.longitude);
        this.map = new window.google.maps.Map($('<div>').appendTo(this.$domNode)[0], this._options.map);
        markerCluster = new window.MarkerClusterer(this.map);
        if ($.isArray(this._options.stores)) {
          _ref = this._options.stores;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            store = _ref[_i];
            markerCluster.addMarker(this.addStore(store));
          }
        } else if ($.type(this._options.stores) === 'string') {
          $.getJSON(this._options.stores, (function(_this) {
            return function(stores) {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = stores.length; _j < _len1; _j++) {
                store = stores[_j];
                _results.push(markerCluster.addMarker(_this.addStore(store)));
              }
              return _results;
            };
          })(this));
        } else {
          southWest = new window.google.maps.LatLng(this._options.stores.southWest.latitude, this._options.stores.southWest.longitude);
          northEast = new window.google.maps.LatLng(this._options.stores.northEast.latitude, this._options.stores.northEast.latitude);
          for (index = _j = 1; _j <= 100; index = ++_j) {
            markerCluster.addMarker(this.addStore({
              latitude: southWest.lat() + northEast.lat() - southWest.lat() * window.Math.random(),
              longitude: southWest.lng() + northEast.lng() - southWest.lng() * window.Math.random()
            }));
          }
        }
        searchInputDomNode = this.$domNode.find('input')[0];
        this.map.controls[window.google.maps.ControlPosition.TOP_LEFT].push(searchInputDomNode);
        searchBox = new window.google.maps.places.SearchBox(searchInputDomNode);
        window.google.maps.event.addListener(searchBox, 'places_changed', (function(_this) {
          return function() {
            return _this.map.setCenter(searchBox.getPlaces()[0].geometry.location);
          };
        })(this));
        window.google.maps.event.addListener(this.map, 'bounds_changed', (function(_this) {
          return function() {
            return searchBox.setBounds(_this.map.getBounds());
          };
        })(this));
        this.fireEvent('loaded');
        return this;
      };

      StoreLocator.prototype.onLoaded = function() {

        /*Is triggered if the complete map ist loaded. */
        window.setTimeout(((function(_this) {
          return function() {
            return _this.$domNode.find('input').fadeIn(_this._options.inputFadeInOption);
          };
        })(this)), this._options.showInputAfterLoadedDelayInMilliseconds);
        return this;
      };

      StoreLocator.prototype.addStore = function(store) {

        /*Registers given store to the google maps canvas. */
        var infoWindow, marker;
        marker = new window.google.maps.Marker({
          position: new window.google.maps.LatLng(store.latitude, store.longitude),
          map: this.map
        });
        marker.icon = this._options.iconPath + this._options.defaultMarkerIconFileName;
        if (store.markerIconFileName) {
          marker.icon = this._options.iconPath + store.markerIconFileName;
        }
        if (store.title) {
          marker.title = store.title;
        }
        infoWindow = new window.google.maps.InfoWindow({
          content: this.makeInfoWindow(store)
        });
        window.google.maps.event.addListener(marker, 'click', (function(_this) {
          return function() {
            if (_this.currentlyOpenWindow != null) {
              _this.currentlyOpenWindow.close();
            }
            _this.currentlyOpenWindow = infoWindow;
            return infoWindow.open(_this.map, marker);
          };
        })(this));
        return marker;
      };

      StoreLocator.prototype.makeInfoWindow = function(store) {

        /*
            Takes the info window data for a store and creates the HTML
            content of the info window.
         */
        var content, name, value;
        if ($.isFunction(this._options.infoBox)) {
          return this._options.infoBox(store);
        }
        if (this._options.infoBox != null) {
          return this._options.infoBox;
        }
        content = '<div>';
        for (name in store) {
          value = store[name];
          content += "" + name + ": " + value + "<br />";
        }
        return "" + content + "</div>";
      };

      return StoreLocator;

    })($.Tools["class"]);
    return $.fn.StoreLocator = function() {
      return $.Tools().controller(StoreLocator, arguments, this);
    };
  };

  if (this.require != null) {
    this.require.scopeIndicator = 'jQuery.fn.StoreLocator';
    this.require('jquery-tools-1.0.coffee', main);
  } else {
    main(this.jQuery);
  }

}).call(this);
