'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copied from html-webpack-plugin
function resolvePublicPath(compilation, filename) {
  var publicPath = typeof compilation.options.output.publicPath !== 'undefined' ? compilation.options.output.publicPath : _path2.default.relative(_path2.default.dirname(filename), '.');

  if (publicPath.length && publicPath.substr(-1, 1) !== '/') {
    publicPath += '/';
  }
  return publicPath;
}

function addFileToAssets(htmlPluginData, compilation) {
  var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var filename = _ref.filename;
  var _ref$typeOfAsset = _ref.typeOfAsset;
  var typeOfAsset = _ref$typeOfAsset === undefined ? 'js' : _ref$typeOfAsset;
  var _ref$includeSourcemap = _ref.includeSourcemap;
  var includeSourcemap = _ref$includeSourcemap === undefined ? true : _ref$includeSourcemap;

  if (!filename) return compilation.errors.push(new Error('No filename defined'));

  return htmlPluginData.plugin.addFileToAssets(filename, compilation).then(function (filename) {
    return htmlPluginData.assets[typeOfAsset].unshift('' + resolvePublicPath(compilation, filename) + filename);
  }).then(function () {
    if (includeSourcemap) {
      return htmlPluginData.plugin.addFileToAssets(filename + '.map', compilation);
    }
    return null;
  });
}

var AddAssetHtmlPlugin = function () {
  function AddAssetHtmlPlugin() {
    var assets = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

    _classCallCheck(this, AddAssetHtmlPlugin);

    this.assets = Array.isArray(assets) ? assets.slice().reverse() : [assets];
  }

  _createClass(AddAssetHtmlPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var _this = this;

      compiler.plugin('compilation', function (compilation) {
        compilation.plugin('html-webpack-plugin-before-html-generation', function (htmlPluginData, callback) {
          _bluebird2.default.mapSeries(_this.assets, function (asset) {
            return addFileToAssets(htmlPluginData, compilation, asset);
          }).then(function () {
            return callback(null, htmlPluginData);
          });
        });
      });
    }
  }]);

  return AddAssetHtmlPlugin;
}();

exports.default = AddAssetHtmlPlugin;
module.exports = exports['default'];
