{
  "_args": [
    [
      {
        "raw": "git+ssh://git@github.com/thaibault/jQuery-tools.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "git+ssh://git@github.com/thaibault/jQuery-tools.git",
        "spec": "git+ssh://git@github.com/thaibault/jQuery-tools.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:thaibault/jQuery-tools.git",
          "sshUrl": "git+ssh://git@github.com/thaibault/jQuery-tools.git",
          "httpsUrl": "git+https://github.com/thaibault/jQuery-tools.git",
          "gitUrl": "git://github.com/thaibault/jQuery-tools.git",
          "shortcut": "github:thaibault/jQuery-tools",
          "directUrl": "https://raw.githubusercontent.com/thaibault/jQuery-tools/master/package.json"
        }
      },
      "/home/torben/cloud/data/repository/jQuery-storeLocator"
    ]
  ],
  "_from": "git+ssh://git@github.com/thaibault/jQuery-tools.git",
  "_id": "jQuery-tools@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/jQuery-tools",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git+ssh://git@github.com/thaibault/jQuery-tools.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "git+ssh://git@github.com/thaibault/jQuery-tools.git",
    "spec": "git+ssh://git@github.com/thaibault/jQuery-tools.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:thaibault/jQuery-tools.git",
      "sshUrl": "git+ssh://git@github.com/thaibault/jQuery-tools.git",
      "httpsUrl": "git+https://github.com/thaibault/jQuery-tools.git",
      "gitUrl": "git://github.com/thaibault/jQuery-tools.git",
      "shortcut": "github:thaibault/jQuery-tools",
      "directUrl": "https://raw.githubusercontent.com/thaibault/jQuery-tools/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+ssh://git@github.com/thaibault/jQuery-tools.git#2131ca9e8c4483041e7bd7d2e8724b04507fb5d0",
  "_shasum": "8555b4bd83b195f708836192ca8f30f0490305c5",
  "_shrinkwrap": null,
  "_spec": "git+ssh://git@github.com/thaibault/jQuery-tools.git",
  "_where": "/home/torben/cloud/data/repository/jQuery-storeLocator",
  "bugs": {
    "url": "https://github.com/thaibault/jQuery-tools/issues"
  },
  "dependencies": {
    "jquery": "2.2.2",
    "sizzle": "*",
    "webOptimizer": "git+ssh://git@github.com/thaibault/webOptimizer.git"
  },
  "description": "upgrade to object orientated rock solid plugins",
  "devDependencies": {
    "jsdom": ">=9.4.0",
    "qunit-cli": ">=0.2.0*",
    "qunitjs": ">=2.0.0",
    "source-map-support": ">=0.4.0"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "2131ca9e8c4483041e7bd7d2e8724b04507fb5d0",
  "homepage": "http://torben.website/jQuery-tools",
  "keywords": [
    "jquery",
    "tools"
  ],
  "license": "CC-BY-3.0",
  "main": "index.compiled.js",
  "name": "jQuery-tools",
  "optionalDependencies": {},
  "readme": "<!-- !/usr/bin/env markdown\n-*- coding: utf-8 -*- -->\n\n<!-- region header\n\nCopyright Torben Sickert 16.12.2012\n\nLicense\n-------\n\nThis library written by Torben Sickert stand under a creative commons naming\n3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de\n\nendregion -->\n\n<!--|deDE:Einsatz-->\nUse case\n--------\n\nThe main goal of This plugin is providing an generic interface logic like\ncontroller for calling instance methods or getting property values of an object\norientated designed plugin. A set of reusable logic elements for building gui\ncomponents is integrated as well.\n<!--deDE:\n    Hauptziel dieses Plugins ist es einen generischen Weg zu bieten indem\n    Objekt Orientierte Plugins verfasst werden können, ohne dabei gegen\n    jQuery's Vorgaben an Plugins zu verstoßen.\n    Desweiteren werden einige wiederverwendbare Logikbausteine zum Bau\n    verschiedener GUI-Komponenten mitgeliefert.\n-->\n\n<!--|deDE:Inhalt-->\nContent\n------\n\n<!--Place for automatic generated table of contents.-->\n[TOC]\n\n<!--|deDE:Merkmale-->\nFeatures\n--------\n\n<ul>\n    <li>\n        Mutual exclusion for depending gui elements\n        <!--deDE:Wechselseitiger Ausschluss für abhängige GUI-Elemente-->\n    </li>\n    <li>\n        Cross browser logging with different log levels\n        <!--deDE:\n            Browserübergreifender Log-Mechanismen mit diversen Log-Levels\n        -->\n    </li>\n    <li>\n        Extending native JavaScript types like strings, arrays or functions\n        <!--deDE:\n            Erweiterung der Standard-JavaScript-Typen wie Strings, Arrays und\n            Funktionen\n        -->\n    </li>\n    <li>\n        A set of helper functions to parse option objects\n        <!--deDE:Hilfsfunktionen um Options-Objekte intelligent zu parsen-->\n    </li>\n    <li>\n        Extended dom tree handling.<!--deDE:Erweitertes DOM-Baum-Management-->\n    </li>\n    <li>\n        Plugin scoped event handling\n        <!--deDE:Plugineigene Namensräume für Events-->\n    </li>\n    <li>\n        Generic none-redundant plugin pattern for JavaScript and CoffeeScript\n        <!--deDE:Generischer Plugin-Muster für JavaScript und CoffeeScript-->\n    </li>\n</ul>\n\n<!--|deDE:Einstieg-->\nQuick start\n-----------\n\nEasy access of a method in \"$.Tools\":\n<!--deDE:Einfacher Aufruf einer Methode aus \"$.Tools\":-->\n\n```javaScript\nvar tools = $.Tools({'logging': true});\ntools.log('test');\n```\n\n<!--|deDE:Plugin-Vorlage in JavaScript-->\nPlugin pattern in JavaScript\n----------------------------\n\nUse as extension for object orientated jQuery plugin using inheritance and dom\nnode reference. This plugin pattern gives their instance back if no dom node is\nprovided. Direct initializing the plugin without providing a dom node is also\nprovided.\n<!--deDE:\n    Einsatz von \"$.Tools\" um Objekt orientierte jQuery Plugins zu verfassen,\n    indem von \"$.Tools\" geerbt wird und der durch jQuery erweiterte DOM-Knoten\n    referenziert wird. Sollte kein DOM-Knoten an die $-Funktion übergeben\n    worden sein, gibt dieser Pattern seine Instanz zurück.\n-->\n\n    #!/usr/bin/env javaScript\n    // -*- coding: utf-8 -*-\n\n    ;(function($) {\n        var Example = function($domNode) {\n            this.$domNode = $domNode;\n            this._options = {...};\n            this.__name__ = 'Example';\n            this.initialize = function(options) {\n                /*\n                    \"this.$domNode\" points to jQuery's wrapped dom node\n                                    (if provided).\n                    \"this\"          points to the \"Example\" instance extended\n                                    by \"Tools\".\n                */\n                if(options)\n                    // Merges given options with default options recursively.\n                    this._options = $.extend(true, {}, this._options, options);\n                return this.$domNode || this;\n            };\n            this.method = function(anArgument) {\n                ...\n                return returnValue;\n            };\n            ...\n        };\n        $.fn.Example = function() {\n            return $.Tools().controller(Example, arguments, this);\n        };\n        $.Example = function() {\n            return $.Tools().controller(Example, arguments);\n        };\n        // Allows to reference the native class, e.g. to inherit from Example.\n        $.Example.class = Example;\n    }).call(this, this.jQuery);\n\nInitialisation with given dom node and without:\n<!--deDE:Aufruf mit und ohne übergebenen DOM-Knoten:-->\n\n```javaScript\n$domNode = $('#domNode').Example({firstOption: 'value'...});\nexampleInstance = $.Example({firstOption: 'value'...});\n```\n\nFunction call from previous generated instance via dom node or instance\nreference:\n<!--deDE:\n    Aufruf einer Plugin-Method anhand der zuvor generierten Instanzreferenz\n    bzw. über den zurückgegebene DOM-Knoten:\n-->\n\n```javaScript\nreturnValue = $('#domNode').Example('method', 'anArgument');\nreturnValue = $('#domNode').Example().method('anArgument');\nexampleInstance = $.Example firstOption: 'value'...\nreturnValue = exampleInstance.method 'anArgument'\n```\n\nUse as extension for default functional orientated jQuery plugin pattern\nusing composition, dom node reference and chaining support.\n<!--deDE:\n    Sollte der standard jQuery-Pattern eingesetzt werden kann wie hier\n    beschrieben auf die Methoden von \"$.Tools\" zugegriffen werden.\n-->\n\n    #!/usr/bin/env javaScript\n    // -*- coding: utf-8 -*-\n\n    ;(function($) {\n        var options = {...};\n        var tools = $.Tools();\n        var example = function(options) {\n            // \"this\" points to dom node grabbed by jQuery.\n            if (options)\n                this._options = $.extend(true, {}, this._options, options);\n            tools.log('initialized.');\n            ...\n        };\n        $.fn.example = function() {\n            if (methods[method])\n                return methods[method].apply(\n                    this, Array.prototype.slice.call(arguments, 1));\n            else if ($.type(method) === 'object' || !method)\n                return methods.init.apply(this, arguments);\n            else\n                $.error(\n                    'Method ' + method + ' does not exist on ' +\n                    'jQuery.example');\n        };\n    }).call(this, this.jQuery);\n\nFunction call:<!--deDE:Funktionsaufruf:-->\n\n```javaScript\nvar $domNode = $('#domNode').example({'firstOption': 'value'...});\n```\n\n<!--|deDE:Plugin-Vorlage in CoffeeScript-->\nPlugin pattern in CoffeeScript\n------------------------------\n\nUse as extension for object orientated jQuery plugin using inheritance and dom\nnode reference. This plugin pattern gives their instance back if no dom node is\nprovided. Direct initializing the plugin without providing a dom node is also\nprovided.\n<!--deDE:\n    Einsatz von \"$.Tools\" um Objekt orientierte jQuery Plugins zu verfassen,\n    indem von \"$.Tools\" geerbt wird und der durch jQuery erweiterte DOM-Knoten\n    referenziert wird. Sollte kein DOM-Knoten an die $-Funktion übergeben\n    worden sein, gibt dieser Pattern seine Instanz zurück.\n-->\n\n    #!/usr/bin/env coffee\n    # -*- coding: utf-8 -*-\n\n    class Example extends $.Tools.class\n        __name__: 'Example'\n        initialize: (options={}) ->\n            ###\n                \"this.$domNode\" points to jQuery's wrapped dom node\n                (if provided).\n                \"this\" points to this \"Example\" instance extended by \"Tools\".\n                Merges given options with default options recursively.\n            ###\n            this._options: {...}\n            # Merges given options with default options recursively.\n            super options\n            this.$domNode or this\n        method: (anArgument) ->\n            ...\n            returnValue\n        ...\n    $.fn.Example = -> $.Tools().controller Example, arguments, this\n    $.Example = -> $.Tools().controller Example, arguments\n    # Allows to reference the native class, e.g. to inherit from Example.\n    $.Example.class = Example\n\nInitialisation with given dom node and without:\n<!--deDE:Aufruf mit übergebenen DOM-Knoten und ohne:-->\n\n```coffee\n$domNode = $('#domNode').Example firstOption: 'value'...\nexampleInstance = $.Example firstOption: 'value'...\n```\n\nFunction call from previous generated instance via dom node or instance\nreference:\n<!--deDE:\n    Aufruf einer Plugin-Method anhand der zuvor generierten Instanzreferenz\n    bzw. über den zurückgegebene DOM-Knoten:\n-->\n\n```coffee\nreturnValue = $('#domNode').Example 'method', 'anArgument'\nreturnValue = $('#domNode').Example().method 'anArgument'\nexampleInstance = $.Example firstOption: 'value'...\nreturnValue = exampleInstance.method 'anArgument'\n```\n\nUse as extension for default functional orientated jQuery plugin pattern\nusing composition, dom node reference and chaining support.\n<!--deDE:\n    Sollte der standard jQuery-Pattern eingesetzt werden kann wie hier\n    beschrieben auf die Methoden von \"$.Tools\" zugegriffen werden.\n-->\n\n    #!/usr/bin/env coffee\n    # -*- coding: utf-8 -*-\n\n    defaultOptions = {...}\n    tools = $.Tools\n    example = (options={}) ->\n        # \"this\" points to dom node grabbed by jQuery.\n        $.extend true, defaultOptions, options\n        tools.log 'initialized.'\n        ...\n    $.fn.example = ->\n        if methods[method]\n            methods[method].apply(\n                this, Array.prototype.slice.call arguments, 1)\n        else if $.type(method) is 'object' or not method\n            methods.init.apply this, arguments\n        else\n            $.error \"Method \\\"#{method}\\\" does not exist on $.example.\"\n\nFunction call:<!--deDE:Funktionsaufruf:-->\n\n```coffee\n$domNode = $('#domNode').example firstOption: 'value'...\n```\n\n<!-- region modline\n\nvim: set tabstop=4 shiftwidth=4 expandtab:\nvim: foldmethod=marker foldmarker=region,endregion:\n\nendregion -->\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/thaibault/jQuery-tools.git"
  },
  "scripts": {
    "build": "webOptimizer build",
    "buildDLL": "webOptimizer buildDLL",
    "clear": "webOptimizer clear",
    "document": "webOptimizer document",
    "lint": "webOptimizer typeCheck && webOptimizer lint",
    "postinstall": "webOptimizer build",
    "preinstall": "webOptimizer preinstall",
    "test": "webOptimizer test",
    "testInBrowser": "webOptimizer testInBrowser",
    "watch": "webOptimizer build --watch",
    "watchDLL": "webOptimizer buildDLL --watch"
  },
  "version": "1.0.0"
}
