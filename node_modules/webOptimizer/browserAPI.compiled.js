// #!/usr/bin/env node

// -*- coding: utf-8 -*-
'use strict';
/* !
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons naming
    3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/
// region imports

Object.defineProperty(exports, "__esModule", {
    value: true
});

// endregion
// region constants

// endregion
// region declaration
const onDomContentLoadedListener = [];
// endregion
// region functions
let windowWithLoadedDomContent = null;
const onDomContentLoaded = window => {
    windowWithLoadedDomContent = window;
    for (const callback of onDomContentLoadedListener) callback(window, false);
};
// endregion
// region ensure presence of common browser environment
if (typeof TARGET === 'undefined' || TARGET === 'node') {
    // region mock browser environment
    const dom = require('jsdom');
    dom.env(`
    <!doctype html>
        <html>
            <head>
                <meta charset="UTF-8">
                <!--Prevent browser caching-->
                <meta http-equiv="cache-control" content="no-cache">
                <meta http-equiv="expires" content="0">
                <meta http-equiv="pragma" content="no-cache">
                <title>test</title>
                <link
                    href="/node_modules/qunitjs/qunit/qunit.css"
                    rel="stylesheet" type="text/css"
                >
            </head>
        <body>
            <div id="qunit"></div>
            <div id="qunit-fixture"></div>
        </body>
    </html>
    `, (error, window) => {
        if (error) throw error;else {
            Object.defineProperty(window, 'location', {
                value: {
                    hash: '',
                    search: '',
                    pathname: '/path',
                    port: '',
                    hostname: 'localhost',
                    host: 'localhost',
                    protocol: 'http:',
                    origin: 'http://localhost',
                    href: 'http://localhost/path',
                    username: '',
                    password: '',
                    assign: () => {},
                    reload: () => {},
                    replace: () => {},
                    toString: function () {
                        return this.href;
                    }
                },
                writable: false
            });
            onDomContentLoaded(window);
        }
    });
    // endregion
} else window.document.addEventListener('DOMContentLoaded', () => {
        onDomContentLoaded(window);
    });
// endregion

exports.default = callback => {
    if (windowWithLoadedDomContent) callback(windowWithLoadedDomContent, true);else onDomContentLoadedListener.push(callback);
};
// region vim modline
// vim: set tabstop=4 shiftwidth=4 expandtab:
// vim: foldmethod=marker foldmarker=region,endregion:
// endregion

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXJBUEkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQVdBOzs7Ozs7QUFNQTtBQUNBOztBQUxDO0FBQ0Q7QUFLQSxNQUFNLDZCQUF1RSxFQUE3RTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDZCQUFxQyxJQUF6QztBQUNBLE1BQU0scUJBQXNCLE1BQUQsSUFBd0I7QUFDL0MsaUNBQTZCLE1BQTdCO0FBQ0EsU0FDSSxNQUFNLFFBRFYsSUFFSSwwQkFGSixFQUlJLFNBQVMsTUFBVCxFQUFpQixLQUFqQjtBQUNQLENBUEQ7QUFRQTtBQUNBO0FBQ0EsSUFBSSxPQUFPLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUMsV0FBVyxNQUFoRCxFQUF3RDtBQUNwRDtBQUNBLFVBQU0sTUFBTSxRQUFRLE9BQVIsQ0FBWjtBQUNBLFFBQUksR0FBSixDQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUFULEVBb0JHLENBQUMsS0FBRCxFQUFlLE1BQWYsS0FBc0M7QUFDckMsWUFBSSxLQUFKLEVBQ0ksTUFBTSxLQUFOLENBREosS0FFSztBQUNELG1CQUFPLGNBQVAsQ0FBc0IsTUFBdEIsRUFBOEIsVUFBOUIsRUFBMEM7QUFDdEMsdUJBQU87QUFDSCwwQkFBTSxFQURIO0FBRUgsNEJBQVEsRUFGTDtBQUdILDhCQUFVLE9BSFA7QUFJSCwwQkFBTSxFQUpIO0FBS0gsOEJBQVUsV0FMUDtBQU1ILDBCQUFNLFdBTkg7QUFPSCw4QkFBVSxPQVBQO0FBUUgsNEJBQVEsa0JBUkw7QUFTSCwwQkFBTSx1QkFUSDtBQVVILDhCQUFVLEVBVlA7QUFXSCw4QkFBVSxFQVhQO0FBWUgsNEJBQVEsTUFBVyxDQUFFLENBWmxCO0FBYUgsNEJBQVEsTUFBVyxDQUFFLENBYmxCO0FBY0gsNkJBQVMsTUFBVyxDQUFFLENBZG5CO0FBZUgsOEJBQVUsWUFBa0I7QUFDeEIsK0JBQU8sS0FBSyxJQUFaO0FBQ0g7QUFqQkUsaUJBRCtCO0FBb0J0QywwQkFBVTtBQXBCNEIsYUFBMUM7QUFzQkEsK0JBQW1CLE1BQW5CO0FBQ0g7QUFDSixLQWhERDtBQWlEQTtBQUNILENBckRELE1Bc0RJLE9BQU8sUUFBUCxDQUFnQixnQkFBaEIsQ0FBaUMsa0JBQWpDLEVBQXFELE1BQVc7QUFDNUQsMkJBQW1CLE1BQW5CO0FBQ0gsS0FGRDtBQUdKOztrQkFFSSxRQURXLElBRUw7QUFDTixRQUFJLDBCQUFKLEVBQ0ksU0FBUywwQkFBVCxFQUFxQyxJQUFyQyxFQURKLEtBR0ksMkJBQTJCLElBQTNCLENBQWdDLFFBQWhDO0FBQ1AsQztBQUNEO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImJyb3dzZXJBUEkuY29tcGlsZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAjIS91c3IvYmluL2VudiBub2RlXG4vLyBAZmxvd1xuLy8gLSotIGNvZGluZzogdXRmLTggLSotXG4ndXNlIHN0cmljdCdcbi8qICFcbiAgICByZWdpb24gaGVhZGVyXG4gICAgQ29weXJpZ2h0IFRvcmJlbiBTaWNrZXJ0IChpbmZvW1wifmF0flwiXXRvcmJlbi53ZWJzaXRlKSAxNi4xMi4yMDEyXG5cbiAgICBMaWNlbnNlXG4gICAgLS0tLS0tLVxuXG4gICAgVGhpcyBsaWJyYXJ5IHdyaXR0ZW4gYnkgVG9yYmVuIFNpY2tlcnQgc3RhbmQgdW5kZXIgYSBjcmVhdGl2ZSBjb21tb25zIG5hbWluZ1xuICAgIDMuMCB1bnBvcnRlZCBsaWNlbnNlLiBzZWUgaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnkvMy4wL2RlZWQuZGVcbiAgICBlbmRyZWdpb25cbiovXG4vLyByZWdpb24gaW1wb3J0c1xuaW1wb3J0IHR5cGUge09uRG9tQ29udGVudExvYWRlZExpc3RlbmVyRnVuY3Rpb24sIFdpbmRvd30gZnJvbSAnLi90eXBlJ1xuIC8vIGVuZHJlZ2lvblxuLy8gcmVnaW9uIGRlY2xhcmF0aW9uXG5kZWNsYXJlIHZhciBUQVJHRVQ6c3RyaW5nXG5kZWNsYXJlIHZhciB3aW5kb3c6V2luZG93XG4vLyBlbmRyZWdpb25cbi8vIHJlZ2lvbiBjb25zdGFudHNcbmNvbnN0IG9uRG9tQ29udGVudExvYWRlZExpc3RlbmVyOkFycmF5PE9uRG9tQ29udGVudExvYWRlZExpc3RlbmVyRnVuY3Rpb24+ID0gW11cbi8vIGVuZHJlZ2lvblxuLy8gcmVnaW9uIGZ1bmN0aW9uc1xubGV0IHdpbmRvd1dpdGhMb2FkZWREb21Db250ZW50Oj9XaW5kb3cgPSBudWxsXG5jb25zdCBvbkRvbUNvbnRlbnRMb2FkZWQgPSAod2luZG93OldpbmRvdyk6dm9pZCA9PiB7XG4gICAgd2luZG93V2l0aExvYWRlZERvbUNvbnRlbnQgPSB3aW5kb3dcbiAgICBmb3IgKFxuICAgICAgICBjb25zdCBjYWxsYmFjazpPbkRvbUNvbnRlbnRMb2FkZWRMaXN0ZW5lckZ1bmN0aW9uIG9mXG4gICAgICAgIG9uRG9tQ29udGVudExvYWRlZExpc3RlbmVyXG4gICAgKVxuICAgICAgICBjYWxsYmFjayh3aW5kb3csIGZhbHNlKVxufVxuLy8gZW5kcmVnaW9uXG4vLyByZWdpb24gZW5zdXJlIHByZXNlbmNlIG9mIGNvbW1vbiBicm93c2VyIGVudmlyb25tZW50XG5pZiAodHlwZW9mIFRBUkdFVCA9PT0gJ3VuZGVmaW5lZCcgfHwgVEFSR0VUID09PSAnbm9kZScpIHtcbiAgICAvLyByZWdpb24gbW9jayBicm93c2VyIGVudmlyb25tZW50XG4gICAgY29uc3QgZG9tID0gcmVxdWlyZSgnanNkb20nKVxuICAgIGRvbS5lbnYoYFxuICAgIDwhZG9jdHlwZSBodG1sPlxuICAgICAgICA8aHRtbD5cbiAgICAgICAgICAgIDxoZWFkPlxuICAgICAgICAgICAgICAgIDxtZXRhIGNoYXJzZXQ9XCJVVEYtOFwiPlxuICAgICAgICAgICAgICAgIDwhLS1QcmV2ZW50IGJyb3dzZXIgY2FjaGluZy0tPlxuICAgICAgICAgICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9XCJjYWNoZS1jb250cm9sXCIgY29udGVudD1cIm5vLWNhY2hlXCI+XG4gICAgICAgICAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj1cImV4cGlyZXNcIiBjb250ZW50PVwiMFwiPlxuICAgICAgICAgICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9XCJwcmFnbWFcIiBjb250ZW50PVwibm8tY2FjaGVcIj5cbiAgICAgICAgICAgICAgICA8dGl0bGU+dGVzdDwvdGl0bGU+XG4gICAgICAgICAgICAgICAgPGxpbmtcbiAgICAgICAgICAgICAgICAgICAgaHJlZj1cIi9ub2RlX21vZHVsZXMvcXVuaXRqcy9xdW5pdC9xdW5pdC5jc3NcIlxuICAgICAgICAgICAgICAgICAgICByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICA8L2hlYWQ+XG4gICAgICAgIDxib2R5PlxuICAgICAgICAgICAgPGRpdiBpZD1cInF1bml0XCI+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGlkPVwicXVuaXQtZml4dHVyZVwiPjwvZGl2PlxuICAgICAgICA8L2JvZHk+XG4gICAgPC9odG1sPlxuICAgIGAsIChlcnJvcjo/RXJyb3IsIHdpbmRvdzpPYmplY3QpOnZvaWQgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdsb2NhdGlvbicsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgICBoYXNoOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6ICcvcGF0aCcsXG4gICAgICAgICAgICAgICAgICAgIHBvcnQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICBob3N0bmFtZTogJ2xvY2FsaG9zdCcsXG4gICAgICAgICAgICAgICAgICAgIGhvc3Q6ICdsb2NhbGhvc3QnLFxuICAgICAgICAgICAgICAgICAgICBwcm90b2NvbDogJ2h0dHA6JyxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luOiAnaHR0cDovL2xvY2FsaG9zdCcsXG4gICAgICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwOi8vbG9jYWxob3N0L3BhdGgnLFxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogJycsXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduOiAoKTp2b2lkID0+IHt9LFxuICAgICAgICAgICAgICAgICAgICByZWxvYWQ6ICgpOnZvaWQgPT4ge30sXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2U6ICgpOnZvaWQgPT4ge30sXG4gICAgICAgICAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpOnN0cmluZyB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ocmVmXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIG9uRG9tQ29udGVudExvYWRlZCh3aW5kb3cpXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC8vIGVuZHJlZ2lvblxufSBlbHNlXG4gICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKTp2b2lkID0+IHtcbiAgICAgICAgb25Eb21Db250ZW50TG9hZGVkKHdpbmRvdylcbiAgICB9KVxuLy8gZW5kcmVnaW9uXG5leHBvcnQgZGVmYXVsdCAoXG4gICAgY2FsbGJhY2s6T25Eb21Db250ZW50TG9hZGVkTGlzdGVuZXJGdW5jdGlvblxuKTp2b2lkID0+IHtcbiAgICBpZiAod2luZG93V2l0aExvYWRlZERvbUNvbnRlbnQpXG4gICAgICAgIGNhbGxiYWNrKHdpbmRvd1dpdGhMb2FkZWREb21Db250ZW50LCB0cnVlKVxuICAgIGVsc2VcbiAgICAgICAgb25Eb21Db250ZW50TG9hZGVkTGlzdGVuZXIucHVzaChjYWxsYmFjaylcbn1cbi8vIHJlZ2lvbiB2aW0gbW9kbGluZVxuLy8gdmltOiBzZXQgdGFic3RvcD00IHNoaWZ0d2lkdGg9NCBleHBhbmR0YWI6XG4vLyB2aW06IGZvbGRtZXRob2Q9bWFya2VyIGZvbGRtYXJrZXI9cmVnaW9uLGVuZHJlZ2lvbjpcbi8vIGVuZHJlZ2lvblxuIl19