#!/usr/bin/env node

// -*- coding: utf-8 -*-
'use strict';
/* !
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons naming
    3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/
// region imports

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _fs = require('fs');

var fileSystem = _interopRequireWildcard(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _helper = require('./helper.compiled');

var _helper2 = _interopRequireDefault(_helper);

var _package = require('./package');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// NOTE: Only needed for debugging this file.
try {
    require('source-map-support/register');
} catch (error) {}
// NOTE: "{configuration as metaConfiguration}" would result in a read only
// variable named "metaConfiguration".


/* eslint-enable no-unused-vars */

/* eslint-disable no-unused-vars */
let metaConfiguration = _package.configuration;
metaConfiguration.default.path.context = _path2.default.resolve(__dirname, '../../');
metaConfiguration.default.contextType = 'main';
if (_path2.default.basename(_path2.default.dirname(process.cwd())) === 'node_modules' || _path2.default.basename(_path2.default.dirname(process.cwd())) === '.staging' && _path2.default.basename(_path2.default.dirname(_path2.default.dirname(process.cwd()))) === 'node_modules') {
    metaConfiguration.default.path.context = process.cwd();
    metaConfiguration.default.contextType = 'dependency';
}
let specificConfiguration;
try {
    // IgnoreTypeCheck
    specificConfiguration = require(_path2.default.join(metaConfiguration.default.path.context, 'package'));
} catch (error) {
    specificConfiguration = { name: 'mockup' };
    metaConfiguration.default.path.context = process.cwd();
}
const name = specificConfiguration.name;
specificConfiguration = specificConfiguration.webOptimizer || {};
specificConfiguration.name = name;
// endregion
// region loading default configuration
// NOTE: Given node command line arguments results in "npm_config_*"
// environment variables.
let debug = metaConfiguration.default.debug;
if (specificConfiguration.debug !== undefined) debug = specificConfiguration.debug;
if (process.env.npm_config_production) debug = false;else if (process.env.npm_config_debug) debug = true;
metaConfiguration.default.path.context += '/';
// Merges final default configuration object depending on given target
// environment.
const libraryConfiguration = metaConfiguration.library;
let configuration;
if (debug) configuration = _helper2.default.extendObject(true, metaConfiguration.default, metaConfiguration.debug);else configuration = metaConfiguration.default;
if (typeof configuration.library === 'object') _helper2.default.extendObject(true, libraryConfiguration, configuration.library);
if (specificConfiguration.library === true || specificConfiguration.library === undefined && configuration.library) configuration = _helper2.default.extendObject(true, configuration, libraryConfiguration);
// endregion
// region merging and evaluating default, test, dynamic and specific settings
// Merges project specific configurations with default ones.
configuration = _helper2.default.extendObject(true, configuration, specificConfiguration);
configuration.debug = debug;
// / region load additional dynamically given configuration
let count = 0;
let filePath = null;
while (true) {
    const newFilePath = configuration.path.context + `.dynamicConfiguration-${ count }.json`;
    try {
        fileSystem.accessSync(newFilePath, fileSystem.F_OK);
    } catch (error) {
        break;
    }
    filePath = newFilePath;
    count += 1;
}
let runtimeInformation = {
    givenCommandLineArguments: process.argv
};
if (filePath) {
    runtimeInformation = JSON.parse(fileSystem.readFileSync(filePath, {
        encoding: 'utf-8' }));
    fileSystem.unlink(filePath, error => {
        if (error) throw error;
    });
}
if (runtimeInformation.givenCommandLineArguments.length > 2)
    // region apply documentation configuration
    if (runtimeInformation.givenCommandLineArguments[2] === 'document') _helper2.default.extendObject(true, configuration, configuration.document);
    // endregion
    // region apply test configuration
    else if (runtimeInformation.givenCommandLineArguments[2] === 'testInBrowser') _helper2.default.extendObject(true, configuration, configuration.testInBrowser);else if (runtimeInformation.givenCommandLineArguments[2] === 'test') _helper2.default.extendObject(true, configuration, configuration.test);
// endregion
// / endregion
_helper2.default.extendObject(true, configuration, runtimeInformation);
let result = null;
const evaluationFunction = configuration =>
// IgnoreTypeCheck
new Function('configuration', 'return ' + runtimeInformation.givenCommandLineArguments[runtimeInformation.givenCommandLineArguments.length - 1])(configuration);
try {
    result = evaluationFunction(configuration);
} catch (error) {}
if (_helper2.default.isPlainObject(result)) _helper2.default.extendObject(true, configuration, result);
// / region determine existing pre compiled dll manifests file paths
configuration.dllManifestFilePaths = [];
let targetDirectory = null;
try {
    targetDirectory = fileSystem.statSync(configuration.path.target);
} catch (error) {}
if (targetDirectory && targetDirectory.isDirectory()) fileSystem.readdirSync(configuration.path.target).forEach(fileName => {
    if (fileName.match(/^.*\.dll-manifest\.json$/)) configuration.dllManifestFilePaths.push(_path2.default.resolve(configuration.path.target, fileName));
});
// / endregion
// / region build absolute paths
for (const pathConfiguration of [configuration.path, configuration.path.asset]) for (const key of ['source', 'target']) if (pathConfiguration[key]) pathConfiguration[key] = _path2.default.resolve(configuration.path.context, _helper2.default.resolveDynamicDataStructure(pathConfiguration[key], configuration)) + '/';
// / endregion
const resolvedConfiguration = _helper2.default.resolveDynamicDataStructure(configuration);
// endregion
// region consolidate file specific build configuration
// Apply default file level build configurations to all file type specific
// ones.
const defaultConfiguration = resolvedConfiguration.build.default;
delete resolvedConfiguration.build.default;
for (const type in resolvedConfiguration.build) if (resolvedConfiguration.build.hasOwnProperty(type)) resolvedConfiguration.build[type] = _helper2.default.extendObject(true, {}, defaultConfiguration, _helper2.default.extendObject(true, { extension: type }, resolvedConfiguration.build[type], { type }));
// endregion
// region apply webpack html plugin workaround
/*
    NOTE: Provides a workaround to handle a bug with changed loader
    configurations.
*/
for (const htmlConguration of resolvedConfiguration.files.html) if (typeof htmlConguration.template === 'string' && htmlConguration.template.includes('!')) {
    const newTemplateString = new String(htmlConguration.template);
    newTemplateString.replace = (string => (_search, _replacement) => string)(htmlConguration.template);
    htmlConguration.template = newTemplateString;
}
// endregion
exports.default = resolvedConfiguration;
// region vim modline
// vim: set tabstop=4 shiftwidth=4 expandtab:
// vim: foldmethod=marker foldmarker=region,endregion:
// endregion

//# sourceMappingURL=data:application/json;base64,