#!/usr/bin/env node

// -*- coding: utf-8 -*-
'use strict';
/* !
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons naming
    3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/
// region imports

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _child_process = require('child_process');

var _fs = require('fs');

var fileSystem = _interopRequireWildcard(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// NOTE: Only needed for debugging this file.
try {
    require('source-map-support/register');
} catch (error) {}
// endregion
// region declarations
// NOTE: This declaration isn't needed if flow knows javaScript's native
// "Proxy" in future.


// endregion
// region methods
/**
 * Provides a class of static methods with generic use cases.
 */
class Helper {
    // region boolean
    /**
     * Checks weather given object is a plain native object.
     * @param object - Object to check.
     * @returns Value "true" if given object is a plain javaScript object and
     * "false" otherwise.
     */
    static isPlainObject(object) {
        return typeof object === 'object' && object !== null && Object.getPrototypeOf(object) === Object.prototype;
    }
    /**
     * Checks weather given object is a function.
     * @param object - Object to check.
     * @returns Value "true" if given object is a function and "false"
     * otherwise.
     */
    static isFunction(object) {
        return Boolean(object) && {}.toString.call(object) === '[object Function]';
    }
    /**
     * Determines whether given file path is within given list of file
     * locations.
     * @param filePath - Path to file to check.
     * @param locationsToCheck - Locations to take into account.
     * @returns Value "true" if given file path is within one of given
     * locations or "false" otherwise.
     */
    static isFilePathInLocation(filePath, locationsToCheck) {
        for (const pathToCheck of locationsToCheck) if (_path2.default.resolve(filePath).startsWith(_path2.default.resolve(pathToCheck))) return true;
        return false;
    }
    // endregion
    /**
     * Translates given name into a valid javaScript one.
     * @param name - Name to convert.
     * @returns Converted name is returned.
     */
    static convertToValidVariableName(name) {
        return name.replace(/^[^a-zA-Z_$]+/, '').replace(/[^0-9a-zA-Z_$]+([a-zA-Z0-9])/g, (fullMatch, firstLetter) => firstLetter.toUpperCase());
    }
    /**
     * Extends given target object with given sources object. As target and
     * sources many expandable types are allowed but target and sources have to
     * to come from the same type.
     * @param targetOrDeepIndicator - Maybe the target or deep indicator.
     * @param _targetAndOrSources - Target and at least one source object.
     * @returns Returns given target extended with all given sources.
     */
    static extendObject(targetOrDeepIndicator, ..._targetAndOrSources) {
        let index = 1;
        let deep = false;
        let target;
        if (typeof targetOrDeepIndicator === 'boolean') {
            // Handle a deep copy situation and skip deep indicator and target.
            deep = targetOrDeepIndicator;
            target = arguments[1];
            index = 2;
        } else target = targetOrDeepIndicator;
        const mergeValue = (key, value, targetValue) => {
            // Recurse if we're merging plain objects or arrays.
            if (deep && value && (Array.isArray(value) || Helper.isPlainObject(value) || value instanceof Map)) {
                let clone;
                if (Array.isArray(value)) clone = targetValue && Array.isArray(targetValue) ? targetValue : [];else if (value instanceof Map) clone = targetValue && targetValue instanceof Map ? targetValue : new Map();else clone = targetValue && Helper.isPlainObject(targetValue) ? targetValue : {};
                // Never move original objects, clone them.
                return Helper.extendObject(deep, clone, value);
            }
            return value;
        };
        while (index < arguments.length) {
            const source = arguments[index];
            let targetType = typeof target;
            let sourceType = typeof source;
            if (target instanceof Map) targetType += ' Map';
            if (source instanceof Map) sourceType += ' Map';
            if (targetType !== sourceType) throw Error(`Can't merge given target type "${ targetType }" with ` + `given source type "${ sourceType }" (${ index }. argument).`);
            // Only deal with non-null/undefined values.
            if (!(source === null || source === undefined)) if (target instanceof Map && source instanceof Map) for (const [key, value] of source) {
                const newValue = mergeValue(key, value, target.get(key));
                // Don't bring in undefined values.
                if (typeof newValue !== 'undefined') target.set(key, newValue);
            } else if (target instanceof Object && source instanceof Object) for (const key in source) if (source.hasOwnProperty(key)) {
                const newValue = mergeValue(key, source[key], target[key]);
                // Don't bring in undefined values.
                if (typeof newValue !== 'undefined') target[key] = newValue;
            }
            index += 1;
        }
        return target;
    }
    /**
     * Forwards given child process communication channels to corresponding
     * current process communication channels.
     * @param childProcess - Child process meta data.
     * @returns Given child process meta data.
     */
    static handleChildProcess(childProcess) {
        childProcess.stdout.pipe(process.stdout);
        childProcess.stderr.pipe(process.stderr);
        childProcess.on('close', returnCode => {
            if (returnCode !== 0) console.error(`Task exited with error code ${ returnCode }`);
        });
        return childProcess;
    }
    /**
     * Iterates through given directory structure recursively and calls given
     * callback for each found file. Callback gets file path and corresponding
     * stat object as argument.
     * @param directoryPath - Path to directory structure to traverse.
     * @param callback - Function to invoke for each traversed file.
     * @returns Given callback function.
     */
    static walkDirectoryRecursivelySync(directoryPath, callback = (_filePath, _stat) => true) {
        fileSystem.readdirSync(directoryPath).forEach(fileName => {
            const filePath = _path2.default.resolve(directoryPath, fileName);
            const stat = fileSystem.statSync(filePath);
            if (callback(filePath, stat) !== false && stat && stat.isDirectory()) Helper.walkDirectoryRecursivelySync(filePath, callback);
        });
        return callback;
    }
    /**
     * Determines a asset type if given file.
     * @param filePath - Path to file to analyse.
     * @param buildConfiguration - Meta informations for available asset
     * types.
     * @param paths - List of paths to search if given path doesn't reference
     * a file directly.
     * @returns Determined file type or "null" of given file couldn't be
     * determined.
     */
    static determineAssetType(filePath, buildConfiguration, paths) {
        let result = null;
        for (const type in buildConfiguration) if (_path2.default.extname(filePath) === `.${ buildConfiguration[type].extension }`) {
            result = type;
            break;
        }
        if (!result) for (const type of ['source', 'target']) for (const assetType in paths.asset) if (paths.asset[assetType].startsWith(_path2.default.join(paths[type], paths.asset[assetType]))) return assetType;
        return result;
    }
    /**
     * Adds a property with a stored array of all matching file paths, which
     * matches each build configuration in given entry path and converts given
     * build configuration into a sorted array were javaScript files takes
     * precedence.
     * @param configuration - Given build configurations.
     * @param entryPath - Path to analyse nested structure.
     * @param context - Path to set paths relative to and determine relative
     * ignored paths to.
     * @param pathsToIgnore - Paths which marks location to ignore (Relative
     * paths are resolved relatively to given context.).
     * @returns Converted build configuration.
     */
    static resolveBuildConfigurationFilePaths(configuration, entryPath = './', context = './', pathsToIgnore = ['.git']) {
        const buildConfiguration = [];
        let index = 0;
        for (const type in configuration) if (configuration.hasOwnProperty(type)) {
            const newItem = Helper.extendObject(true, { filePaths: [] }, configuration[type]);
            Helper.walkDirectoryRecursivelySync(entryPath, ((index, buildConfigurationItem) => (filePath, stat) => {
                if (Helper.isFilePathInLocation(filePath, pathsToIgnore)) return false;
                if (stat.isFile() && _path2.default.extname(filePath).substring(1) === buildConfigurationItem.extension && !new RegExp(buildConfigurationItem.fileNamePattern).test(filePath)) buildConfigurationItem.filePaths.push(filePath);
            })(index, newItem));
            buildConfiguration.push(newItem);
            index += 1;
        }
        return buildConfiguration.sort((first, second) => {
            if (first.outputExtension !== second.outputExtension) {
                if (first.outputExtension === 'js') return -1;
                if (second.outputExtension === 'js') return 1;
                return first.outputExtension < second.outputExtension ? -1 : 1;
            }
            return 0;
        });
    }
    /**
     * Determines all file and directory paths related to given internal
     * modules as array.
     * @param internalInjection - List of moduleIDs or module file paths.
     * @param moduleAliases - Mapping of aliases to take into account.
     * @param knownExtensions - List of file extensions to take into account.
     * @param context - File path to resolve relative to.
     * @returns Object with a file path and directory path key mapping to
     * corresponding list of paths.
     */
    static determineModuleLocations(internalInjection, moduleAliases = {}, knownExtensions = ['.js'], context = './') {
        const filePaths = [];
        const directoryPaths = [];
        const normalizedInternalInjection = Helper.normalizeInternalInjection(internalInjection);
        for (const chunkName in normalizedInternalInjection) if (normalizedInternalInjection.hasOwnProperty(chunkName)) for (const moduleID of normalizedInternalInjection[chunkName]) {
            const filePath = Helper.determineModuleFilePath(moduleID, moduleAliases, knownExtensions, context);
            filePaths.push(filePath);
            const directoryPath = _path2.default.dirname(filePath);
            if (!directoryPaths.includes(directoryPath)) directoryPaths.push(directoryPath);
        }
        return { filePaths, directoryPaths };
    }
    /**
     * Every injection definition type can be represented as plain object
     * (mapping from chunk name to array of module ids). This method converts
     * each representation into the normalized plain object notation.
     * @param internalInjection - Given internal injection to normalize.
     * @returns Normalized representation of given internal injection.
     */
    static normalizeInternalInjection(internalInjection) {
        let result = {};
        if (internalInjection instanceof Object && Helper.isPlainObject(internalInjection)) {
            let hasContent = false;
            const chunkNamesToDelete = [];
            for (const chunkName in internalInjection) if (internalInjection.hasOwnProperty(chunkName)) if (Array.isArray(internalInjection[chunkName])) {
                if (internalInjection[chunkName].length > 0) {
                    hasContent = true;
                    result[chunkName] = internalInjection[chunkName];
                } else chunkNamesToDelete.push(chunkName);
            } else {
                hasContent = true;
                result[chunkName] = [internalInjection[chunkName]];
            }
            if (hasContent) for (const chunkName of chunkNamesToDelete) delete result[chunkName];else result = { index: [] };
        } else if (typeof internalInjection === 'string') result = { index: [internalInjection] };else if (Array.isArray(internalInjection)) result = { index: internalInjection };
        return result;
    }
    /**
     * Determines all concrete file paths for given injection which are marked
     * with the "__auto__" indicator.
     * @param givenInjection - Given internal and external injection to take
     * into account.
     * @param buildConfigurations - Resolved build configuration.
     * @param modulesToExclude - A list of modules to exclude (specified by
     * path or id) or a mapping from chunk names to module ids.
     * @param moduleAliases - Mapping of aliases to take into account.
     * @param knownExtensions - File extensions to take into account.
     * @param context - File path to use as starting point.
     * @param pathsToIgnore - Paths which marks location to ignore (Relative
     * paths are resolved relatively to given context.).
     * @returns Given injection with resolved marked indicators.
     */
    static resolveInjection(givenInjection, buildConfigurations, modulesToExclude, moduleAliases = {}, knownExtensions = ['.js', '.css', '.svg', '.html'], context = './', pathsToIgnore = ['.git']) {
        const injection = Helper.extendObject(true, {}, givenInjection);
        const moduleFilePathsToExclude = Helper.determineModuleLocations(modulesToExclude, moduleAliases, knownExtensions, context, pathsToIgnore).filePaths;
        for (const type of ['internal', 'external'])
        /* eslint-disable curly */
        if (typeof injection[type] === 'object') {
            for (const chunkName in injection[type]) if (injection[type][chunkName] === '__auto__') {
                injection[type][chunkName] = [];
                const modules = Helper.getAutoChunk(buildConfigurations, moduleFilePathsToExclude, context);
                for (const subChunkName in modules) if (modules.hasOwnProperty(subChunkName)) injection[type][chunkName].push(modules[subChunkName]);
            }
        } else if (injection[type] === '__auto__')
            /* eslint-enable curly */
            injection[type] = Helper.getAutoChunk(buildConfigurations, moduleFilePathsToExclude, context);
        return injection;
    }
    /**
     * Determines all module file paths.
     * @param buildConfigurations - Resolved build configuration.
     * @param moduleFilePathsToExclude - A list of modules file paths to
     * exclude (specified by path or id) or a mapping from chunk names to
     * module ids.
     * @param context - File path to use as starting point.
     * @returns All determined module file paths.
     */
    static getAutoChunk(buildConfigurations, moduleFilePathsToExclude, context) {
        const result = {};
        const injectedBaseNames = {};
        for (const buildConfiguration of buildConfigurations) {
            if (!injectedBaseNames[buildConfiguration.outputExtension]) injectedBaseNames[buildConfiguration.outputExtension] = [];
            for (const moduleFilePath of buildConfiguration.filePaths) if (!moduleFilePathsToExclude.includes(moduleFilePath)) {
                const baseName = _path2.default.basename(moduleFilePath, `.${ buildConfiguration.extension }`);
                /*
                    Ensure that each output type has only one source
                    representation.
                */
                if (!injectedBaseNames[buildConfiguration.outputExtension].includes(baseName)) {
                    /*
                        Ensure that if same basenames and different output
                        types can be distinguished by their extension
                        (JavaScript-Modules remains without extension since
                        they will be handled first because the build
                        configurations are expected to be sorted in this
                        context).
                    */
                    if (result[baseName]) result[_path2.default.relative(context, moduleFilePath)] = moduleFilePath;else result[baseName] = moduleFilePath;
                    injectedBaseNames[buildConfiguration.outputExtension].push(baseName);
                }
            }
        }
        return result;
    }
    /**
     * Adds dynamic getter and setter to any given data structure such as maps.
     * @param object - Object to proxy.
     * @param getterWrapper - Function to wrap each property get.
     * @param setterWrapper - Function to wrap each property set.
     * @param getterMethodName - Method name to get a stored value by key.
     * @param setterMethodName - Method name to set a stored value by key.
     * @param containesMethodName - Method name to indicate if a key is stored
     * in given data structure.
     * @param deep - Indicates to perform a deep wrapping of specified types.
     * performed via "value instanceof type".).
     * @param typesToExtend - Types which should be extended (Checks are
     * performed via "value instanceof type".).
     * @returns Returns given object wrapped with a dynamic getter proxy.
     */
    static addDynamicGetterAndSetter(object, getterWrapper = value => value, setterWrapper = (key, value) => value, getterMethodName = '[]', setterMethodName = '[]', containesMethodName = 'hasOwnProperty', deep = true, typesToExtend = [Object]) {
        if (deep) if (object instanceof Map) for (const [key, value] of object) object.set(key, Helper.addDynamicGetterAndSetter(value, getterWrapper, setterWrapper, getterMethodName, setterMethodName, containesMethodName, deep, typesToExtend));else if (typeof object === 'object' && object !== null) {
            for (const key in object) if (object.hasOwnProperty(key)) object[key] = Helper.addDynamicGetterAndSetter(object[key], getterWrapper, setterWrapper, getterMethodName, setterMethodName, containesMethodName, deep, typesToExtend);
        } else if (Array.isArray(object)) {
            let index = 0;
            for (const value of object) {
                object[index] = Helper.addDynamicGetterAndSetter(value, getterWrapper, setterWrapper, getterMethodName, setterMethodName, containesMethodName, deep, typesToExtend);
                index += 1;
            }
        }
        for (const type of typesToExtend) if (object instanceof type) {
            if (object.__target__) return object;
            const handler = {};
            if (containesMethodName) handler.has = (target, name) => {
                if (containesMethodName === '[]') return name in target;
                return target[containesMethodName](name);
            };
            if (containesMethodName && getterMethodName) handler.get = (target, name) => {
                if (name === '__target__') return target;
                if (typeof target[name] === 'function') return target[name].bind(target);
                if (target[containesMethodName](name)) {
                    if (getterMethodName === '[]') return getterWrapper(target[name]);
                    return getterWrapper(target[getterMethodName](name));
                }
                return target[name];
            };
            if (setterMethodName) handler.set = (target, name, value) => {
                if (setterMethodName === '[]') target[name] = setterWrapper(name, value);else target[setterMethodName](name, setterWrapper(name, value));
            };
            return new Proxy(object, handler);
        }
        return object;
    }
    /**
     * Searches for nested mappings with given indicator key and resolves
     * marked values. Additionally all objects are wrapped with a proxy to
     * dynamically resolve nested properties.
     * @param object - Given mapping to resolve.
     * @param configuration - Configuration context to resolve marked values.
     * @param deep - Indicates weather to perform a recursive resolving.
     * @param evaluationIndicatorKey - Indicator property name to mark a value
     * to evaluate.
     * @param executionIndicatorKey - Indicator property name to mark a value
     * to evaluate.
     * @returns Evaluated given mapping.
     */
    static resolveDynamicDataStructure(object, configuration = null, deep = true, evaluationIndicatorKey = '__evaluate__', executionIndicatorKey = '__execute__') {
        if (configuration === null && typeof object === 'object') configuration = object;
        if (deep && configuration && !configuration.__target__) configuration = Helper.addDynamicGetterAndSetter(configuration, value => Helper.resolveDynamicDataStructure(value, configuration, false, evaluationIndicatorKey, executionIndicatorKey), (key, value) => value, '[]', '');
        if (typeof object === 'object' && object !== null) {
            for (const key in object) if ([evaluationIndicatorKey, executionIndicatorKey].includes(key)) try {
                const evaluationFunction = new Function('self', 'webOptimizerPath', 'currentPath', 'path', 'helper', (key === evaluationIndicatorKey ? 'return ' : '') + object[key]);
                return Helper.resolveDynamicDataStructure(evaluationFunction(configuration, __dirname, process.cwd(), _path2.default, Helper), configuration, false, evaluationIndicatorKey, executionIndicatorKey);
            } catch (error) {
                throw Error('Error during ' + (key === evaluationIndicatorKey ? 'executing' : 'evaluating') + ` "${ object[key] }": ` + error);
            } else if (deep) object[key] = Helper.resolveDynamicDataStructure(object[key], configuration, deep, evaluationIndicatorKey, executionIndicatorKey);
        } else if (deep && Array.isArray(object)) {
            let index = 0;
            for (const value of object) {
                object[index] = Helper.resolveDynamicDataStructure(value, configuration, deep, evaluationIndicatorKey, executionIndicatorKey);
                index += 1;
            }
        }
        return object;
    }
    /**
     * Determines a concrete file path for given module id.
     * @param moduleID - Module id to determine.
     * @param aliases - Mapping of aliases to take into account.
     * @returns The alias applied given module id.
     */
    static applyAliases(moduleID, aliases) {
        for (const alias in aliases) if (alias.endsWith('$')) {
            if (moduleID === alias.substring(0, alias.length - 1)) moduleID = aliases[alias];
        } else moduleID = moduleID.replace(alias, aliases[alias]);
        return moduleID;
    }
    /**
     * Determines a concrete file path for given module id.
     * @param moduleID - Module id to determine.
     * @param moduleAliases - Mapping of aliases to take into account.
     * @param knownExtensions - List of known extensions.
     * @param context - File path to determine relative to.
     * @returns File path or given module id if determinations has failed or
     * wasn't necessary.
     */
    static determineModuleFilePath(moduleID, moduleAliases = {}, knownExtensions = ['.js'], context = './') {
        moduleID = Helper.applyAliases(moduleID, moduleAliases);
        for (const moduleLocation of ['', 'node_modules', '../']) for (let fileName of ['__package__', '', 'index', 'main']) for (const extension of knownExtensions) {
            let moduleFilePath = moduleID;
            if (!moduleFilePath.startsWith('/')) moduleFilePath = _path2.default.join(context, moduleLocation, moduleFilePath);
            if (fileName === '__package__') {
                try {
                    if (fileSystem.statSync(moduleFilePath).isDirectory()) {
                        const pathToPackageJSON = _path2.default.join(moduleFilePath, 'package.json');
                        if (fileSystem.statSync(pathToPackageJSON).isFile()) {
                            const localConfiguration = JSON.parse(fileSystem.readFileSync(pathToPackageJSON, {
                                encoding: 'utf-8' }));
                            if (localConfiguration.main) fileName = localConfiguration.main;
                        }
                    }
                } catch (error) {}
                if (fileName === '__package__') continue;
            }
            moduleFilePath = _path2.default.join(moduleFilePath, fileName);
            moduleFilePath += extension;
            try {
                if (fileSystem.statSync(moduleFilePath).isFile()) return moduleFilePath;
            } catch (error) {}
        }
        return moduleID;
    }
}
exports.default = Helper; // endregion
// region vim modline
// vim: set tabstop=4 shiftwidth=4 expandtab:
// vim: foldmethod=marker foldmarker=region,endregion:
// endregion

//# sourceMappingURL=data:application/json;base64,