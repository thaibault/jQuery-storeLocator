#!/usr/bin/env node

// -*- coding: utf-8 -*-
'use strict';
/* !
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons naming
    3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/
// region imports

var _child_process = require('child_process');

var _fs = require('fs');

var fileSystem = _interopRequireWildcard(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rimraf = require('rimraf');

var _configurator = require('./configurator.compiled');

var _configurator2 = _interopRequireDefault(_configurator);

var _helper = require('./helper.compiled');

var _helper2 = _interopRequireDefault(_helper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// NOTE: Only needed for debugging this file.
try {
    require('source-map-support/register');
} catch (error) {}

// endregion
// region controller
const childProcessOptions = {
    cwd: _configurator2.default.path.context,
    env: process.env,
    shell: true,
    stdio: 'inherit'
};
const closeEventNames = ['exit', 'close', 'uncaughtException', 'SIGINT', 'SIGTERM', 'SIGQUIT'];
const childProcesses = [];
const processPromises = [];
const possibleArguments = ['build', 'buildDLL', 'clear', 'document', 'lint', 'preinstall', 'test', 'testInBrowser', 'typeCheck'];
const closeEventHandlers = [];
if (_configurator2.default.givenCommandLineArguments.length > 2) {
    // region temporary save dynamically given configurations

    let dynamicConfiguration = {
        givenCommandLineArguments: _configurator2.default.givenCommandLineArguments.slice() };
    if (_configurator2.default.givenCommandLineArguments.length > 3) {
        const evaluationFunction = configuration =>
        // IgnoreTypeCheck
        new Function('configuration', 'return ' + configuration.givenCommandLineArguments[configuration.givenCommandLineArguments.length - 1])(configuration);
        try {
            if (_helper2.default.isPlainObject(evaluationFunction(_configurator2.default))) _configurator2.default.givenCommandLineArguments.pop();
        } catch (error) {}
    }
    let count = 0;
    let filePath = `${ _configurator2.default.path.context }.` + `dynamicConfiguration-${ count }.json`;
    while (true) {
        filePath = `${ _configurator2.default.path.context }.dynamicConfiguration-` + `${ count }.json`;
        try {
            fileSystem.accessSync(filePath, fileSystem.F_OK);
        } catch (error) {
            break;
        }
        count += 1;
    }
    fileSystem.writeFileSync(filePath, JSON.stringify(dynamicConfiguration));
    const additionalArguments = process.argv.splice(3);
    // / region register exit handler to tidy up
    closeEventHandlers.push(function (error) {
        try {
            fileSystem.unlinkSync(filePath);
        } catch (error) {}
        if (error) throw error;
        return error;
    });
    // / endregion
    // endregion
    // region handle clear
    /*
        NOTE: A build could depend on previously created dll packages so a
        clean should not be performed in that case.
    */
    if (!['build', 'serve', 'testInBrowser'].includes(_configurator2.default.givenCommandLineArguments[2]) && possibleArguments.includes(_configurator2.default.givenCommandLineArguments[2])) {
        if (_path2.default.resolve(_configurator2.default.path.target) === _path2.default.resolve(_configurator2.default.path.context)) {
            // Removes all compiled files.
            _helper2.default.walkDirectoryRecursivelySync(_configurator2.default.path.target, (filePath, stat) => {
                if (_helper2.default.isFilePathInLocation(filePath, _configurator2.default.path.ignore)) return false;
                for (const type in _configurator2.default.build) if (new RegExp(_configurator2.default.build[type].fileNamePattern).test(filePath)) {
                    if (stat.isDirectory()) {
                        (0, _rimraf.sync)(filePath, {
                            glob: false });
                        return false;
                    }
                    fileSystem.unlinkSync(filePath);
                    break;
                }
            });
            fileSystem.readdirSync(_configurator2.default.path.target).forEach(fileName => {
                if (fileName.length > '.dll-manifest.json'.length && fileName.endsWith('.dll-manifest.json')) fileSystem.unlinkSync(_path2.default.resolve(_configurator2.default.path.target, fileName));
            });
        } else (0, _rimraf.sync)(_configurator2.default.path.target, {
            glob: false });
        try {
            (0, _rimraf.sync)(_configurator2.default.path.apiDocumentation, { glob: false });
        } catch (error) {}
    }
    // endregion
    // region handle build
    const buildConfigurations = _helper2.default.resolveBuildConfigurationFilePaths(_configurator2.default.build, _configurator2.default.path.asset.source, _configurator2.default.path.context, _configurator2.default.path.ignore);
    if (['build', 'buildDLL', 'document', 'test'].includes(process.argv[2])) {
        const tidyUp = () => {
            /*
                Determines all none javaScript entities which have been emitted
                as single javaScript module to remove.
            */
            const internalInjection = _helper2.default.normalizeInternalInjection(_helper2.default.resolveInjection(_configurator2.default.injection, buildConfigurations, _configurator2.default.testInBrowser.injection.internal, _configurator2.default.module.aliases, _configurator2.default.knownExtensions, _configurator2.default.path.context, _configurator2.default.path.ignore).internal);
            for (const chunkName in internalInjection) if (internalInjection.hasOwnProperty(chunkName)) for (const moduleID of internalInjection[chunkName]) {
                const type = _helper2.default.determineAssetType(_helper2.default.determineModuleFilePath(moduleID), _configurator2.default.build, _configurator2.default.path);
                // TODO replace all placeholder like [hash] [id] ...
                const filePath = _configurator2.default.files.javaScript.replace('[name]', _path2.default.join(_path2.default.relative(_path2.default.dirname(moduleID), _configurator2.default.path.context), _path2.default.basename(moduleID))).replace(/\?[^?]+$/, '');
                if (typeof type === 'string' && _configurator2.default.build[type]) if (_configurator2.default.build[type].outputExtension === 'js') try {
                    fileSystem.chmodSync(filePath, '755');
                } catch (error) {} else for (const suffix of ['', '.map']) try {
                    fileSystem.unlinkSync(filePath + suffix);
                } catch (error) {}
            }
            for (const filePath of _configurator2.default.path.tidyUp) try {
                fileSystem.unlinkSync(filePath);
            } catch (error) {}
        };
        closeEventHandlers.push(tidyUp);
        /*
            Triggers complete asset compiling and bundles them into the final
            productive output.
        */
        processPromises.push(new Promise((resolve, reject) => {
            const childProcess = (0, _child_process.spawn)(_configurator2.default.commandLine.build.command, (_configurator2.default.commandLine.build.arguments || []).concat(additionalArguments), childProcessOptions);
            for (const closeEventName of closeEventNames) childProcess.on(closeEventName, returnCode => {
                if (typeof returnCode !== 'number' || returnCode === 0) tidyUp();else reject(new Error(`Task exited with error code ${ returnCode }`));
            });
            childProcesses.push(childProcess);
        }));
        // endregion
        // region handle preinstall
    } else if (_configurator2.default.library && _configurator2.default.givenCommandLineArguments[2] === 'preinstall') {
            // Perform all file specific preprocessing stuff.
            const testModuleFilePaths = _helper2.default.determineModuleLocations(_configurator2.default.testInBrowser.injection.internal, _configurator2.default.module.aliases, _configurator2.default.knownExtensions, _configurator2.default.path.context, _configurator2.default.path.ignore).filePaths;
            for (const buildConfiguration of buildConfigurations) for (const filePath of buildConfiguration.filePaths) if (!testModuleFilePaths.includes(filePath)) {
                const evaluationFunction = (global, self, buildConfiguration, path, additionalArguments, filePath) =>
                // IgnoreTypeCheck
                new Function('global', 'self', 'buildConfiguration', 'path', 'additionalArguments', 'filePath', 'return `' + buildConfiguration[_configurator2.default.givenCommandLineArguments[2]] + '`')(global, self, buildConfiguration, path, additionalArguments, filePath);
                processPromises.push(new Promise((resolve, reject) => _helper2.default.handleChildProcess((0, _child_process.exec)(evaluationFunction(global, _configurator2.default, buildConfiguration, _path2.default, additionalArguments, filePath), childProcessOptions, error => {
                    if (error) reject(error);else resolve();
                }))));
            }
        }
    // endregion
    // region handle remaining tasks
    const handleTask = type => processPromises.push(new Promise((resolve, reject) => {
        const childProcess = (0, _child_process.spawn)(_configurator2.default.commandLine[type].command, (_configurator2.default.commandLine[type].arguments || []).concat(additionalArguments), childProcessOptions);
        childProcess.on('close', returnCode => {
            if (returnCode === 0) resolve();else reject(returnCode);
        });
        childProcesses.push(childProcess);
    }));
    // / region synchronous
    for (const type of ['document', 'test']) if (_configurator2.default.givenCommandLineArguments[2] === type) {
        Promise.all(processPromises).then(() => handleTask(type));
        break;
    }
    // / endregion
    // / region asynchronous
    for (const type of ['lint', 'testInBrowser', 'typeCheck', 'serve']) if (_configurator2.default.givenCommandLineArguments[2] === type) {
        handleTask(type);
        break;
    }
    // / endregion
    // endregion
}
let finished = false;
const closeHandler = function () {
    if (!finished) for (const closeEventHandler of closeEventHandlers) closeEventHandler.apply(this, arguments);
    finished = true;
    process.exit();
};
for (const closeEventName of closeEventNames) process.on(closeEventName, closeHandler);
if (!_configurator2.default.library) possibleArguments.push('serve');
// IgnoreTypeCheck
if (require.main === module && (_configurator2.default.givenCommandLineArguments.length < 3 || !possibleArguments.includes(_configurator2.default.givenCommandLineArguments[2]))) console.log(`Give one of "${ possibleArguments.join('", "') }" as command line ` + 'argument. You can provide a json string as second parameter to ' + 'dynamically overwrite some configurations.\n');
// endregion
// region forward nested return codes
Promise.all(processPromises).catch(returnCode => process.exit(returnCode));
// endregion
// region vim modline
// vim: set tabstop=4 shiftwidth=4 expandtab:
// vim: foldmethod=marker foldmarker=region,endregion:
// endregion

//# sourceMappingURL=data:application/json;base64,